/*
--- load_TBL_METRIC_RECONC_STATS for all Daily Tables --
The SQL statements are to capture various metrics for SIERA tables and power
operational metrics dashboard. The table details are as follow :
1. COMM_FACT for DSP 
2. COMM_FACT for MMLIA 
3. NADA_FACT
4. PREMIUM_FACT for MMLIA
5. PREMIUM_FACT for POL_RCOG_CR
6. Detached Office 
7. NFF_Active 
8. Rising Leader Daily 
9. Team Advisor
10. Detached Office Advsior 
8. Team
9. UNIT
10. Agreement
11. Agency Afiiliation
12. Advisor Status
13. Contract dimension
14. Agreement Detail
15. Advsr Agency Contract
16. Advisor Persistency 
17. Agency Persistency
18. General Agent History
19. Net Field Force (NFF) 
20. Secondary Comp Advisor
21. Advisor
22. Advisor History
23. Unit Manager
24. SM Unit Advisor Split 
25. Recognition DI Bonus
26. Product
27. SM Recognition Summary Daily 
28. National Account
29. NFF History
*/


/*-----------------------------------------------------------------------------------*/

-- COMM_FACT DSP COMMISSIONS -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM, METRIC_NM, Cycle_dt, LST_MOD_TS )

SELECT 
TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, TGT.Business_Name AS Business_Name, 
SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,
TGT.Cycle_date AS Cycle_date, CURRENT_TIMESTAMP as LST_MOD_TS 


FROM  

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'COMM_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'DSP Commissions' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , 'FYC Amount', 
'RYC_AMT', 'RYC Amount',
'WCC_AMT', 'WCC Amount', 
'UNKWN_PROD_FYC_AMT', 'Unknown Product FYC Amount',
'UNKWN_PROD_RYC_AMT', 'Unknown Product RYC Amount',
'UNKWN_PROD_WCC_AMT', 'Unknown Product WCC Amount',
'UNKWN_CBO_FYC_AMT', 'Unknown CBO FYC Amount',
'UNKWN_CBO_RYC_AMT', 'Unknown CBO RYC Amount',
'UNKWN_CBO_WCC_AMT', 'Unknown CBO WCC Amount',
'UNKWN_UNIT_FYC_AMT', 'Unknown Unit FYC Amount',
'UNKWN_UNIT_RYC_AMT', 'Unknown Unit RYC Amount',
'UNKWN_UNIT_WCC_AMT', 'Unknown Unit WCC Amount',
'UNKWN_AGMT_FYC_AMT', 'Unknown Agreement FYC Amount',
'UNKWN_AGMT_RYC_AMT', 'Unknown Agreement RYC Amount',
'UNKWN_AGMT_WCC_AMT', 'Unknown Agreement WCC Amount'
) AS METRIC_NAME , 

CAST( TRUNC( 
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'WCC_AMT', WCC_AMT, 
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_PROD_WCC_AMT', UNKWN_PROD_WCC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_CBO_WCC_AMT', UNKWN_CBO_WCC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_UNIT_WCC_AMT', UNKWN_UNIT_WCC_AMT,
'UNKWN_AGMT_FYC_AMT', UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT', UNKWN_AGMT_RYC_AMT,
'UNKWN_AGMT_WCC_AMT', UNKWN_AGMT_WCC_AMT
) ,2) AS VARCHAR(100) ) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, 
SUM(COMM_AMT_FYC) AS FYC_AMT,
SUM(COMM_AMT_REN) AS RYC_AMT,
SUM(WTD_COMM_CRDTS) AS WCC_AMT,

SUM(CASE WHEN PROD_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_PROD_FYC_AMT,
SUM(CASE WHEN PROD_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_PROD_RYC_AMT,
SUM(CASE WHEN PROD_SID = -1 THEN WTD_COMM_CRDTS ELSE 0.00 END )  AS UNKWN_PROD_WCC_AMT,

SUM(CASE WHEN CNTR_CDE = '-1' THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_CBO_FYC_AMT,
SUM(CASE WHEN CNTR_CDE = '-1' THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_CBO_RYC_AMT,
SUM(CASE WHEN CNTR_CDE = '-1' THEN WTD_COMM_CRDTS ELSE 0.00 END )  AS UNKWN_CBO_WCC_AMT, 

SUM(CASE WHEN UNIT_MA_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_UNIT_FYC_AMT,
SUM(CASE WHEN UNIT_MA_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_UNIT_RYC_AMT,
SUM(CASE WHEN UNIT_MA_SID = -1 THEN WTD_COMM_CRDTS ELSE 0.00 END )  AS UNKWN_UNIT_WCC_AMT,

SUM(CASE WHEN AGMT_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_AGMT_FYC_AMT,
SUM(CASE WHEN AGMT_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_AGMT_RYC_AMT,
SUM(CASE WHEN AGMT_SID = -1 THEN WTD_COMM_CRDTS ELSE 0.00 END )  AS UNKWN_AGMT_WCC_AMT


FROM PROD_USIG_CRCOG_DM.COMM_FACT FACT  
JOIN PROD_USIG_CRCOG_DM.TXN_TYP T ON FACT.COMM_TXN_TYP_SID = T.TXN_TYP_SID  
WHERE SRC_SYS_ID = 59 AND FACT.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL ) 
GROUP BY FACT.CYCLE_DT  
) FACT 

CROSS JOIN 
(
SELECT 'FYC_AMT' AS METRIC_NAME
UNION 
SELECT 'RYC_AMT'
UNION 
SELECT 'WCC_AMT'
UNION 
SELECT 'UNKWN_PROD_FYC_AMT'
UNION 
SELECT 'UNKWN_PROD_RYC_AMT'
UNION
SELECT 'UNKWN_PROD_WCC_AMT' 
UNION
SELECT 'UNKWN_CBO_FYC_AMT'
UNION 
SELECT 'UNKWN_CBO_RYC_AMT'
UNION
SELECT 'UNKWN_CBO_WCC_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYC_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYC_AMT'
UNION
SELECT 'UNKWN_UNIT_WCC_AMT'
UNION
SELECT 'UNKWN_AGMT_FYC_AMT'
UNION
SELECT 'UNKWN_AGMT_RYC_AMT'
UNION
SELECT 'UNKWN_AGMT_WCC_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'WCC_AMT', WCC_AMT, 
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_PROD_WCC_AMT', UNKWN_PROD_WCC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_CBO_WCC_AMT', UNKWN_CBO_WCC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_UNIT_WCC_AMT', UNKWN_UNIT_WCC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT',UNKWN_AGMT_RYC_AMT,
'UNKWN_AGMT_WCC_AMT',UNKWN_AGMT_WCC_AMT
) IS NOT NULL 


 )TGT 
 
 
 JOIN
 
 
( 
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'COMM_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'DSP Commissions' AS Rec_Type,
EDW.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , 'FYC Amount', 
'RYC_AMT', 'RYC Amount',
'WCC_AMT', 'WCC Amount', 
'UNKWN_PROD_FYC_AMT', 'Unknown Product FYC Amount',
'UNKWN_PROD_RYC_AMT', 'Unknown Product RYC Amount',
'UNKWN_PROD_WCC_AMT', 'Unknown Product WCC Amount',
'UNKWN_CBO_FYC_AMT', 'Unknown CBO FYC Amount',
'UNKWN_CBO_RYC_AMT', 'Unknown CBO RYC Amount',
'UNKWN_CBO_WCC_AMT', 'Unknown CBO WCC Amount',
'UNKWN_UNIT_FYC_AMT', 'Unknown Unit FYC Amount',
'UNKWN_UNIT_RYC_AMT', 'Unknown Unit RYC Amount',
'UNKWN_UNIT_WCC_AMT', 'Unknown Unit WCC Amount',
'UNKWN_AGMT_FYC_AMT', 'Unknown Agreement FYC Amount',
'UNKWN_AGMT_RYC_AMT', 'Unknown Agreement RYC Amount',
'UNKWN_AGMT_WCC_AMT', 'Unknown Agreement WCC Amount'
) AS METRIC_NAME , 

CAST(
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'WCC_AMT', WCC_AMT, 
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_PROD_WCC_AMT', UNKWN_PROD_WCC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_CBO_WCC_AMT', UNKWN_CBO_WCC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_UNIT_WCC_AMT', UNKWN_UNIT_WCC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT', UNKWN_AGMT_RYC_AMT,
'UNKWN_AGMT_WCC_AMT', UNKWN_AGMT_WCC_AMT
) AS VARCHAR(100) )
AS SOURCE_VALUE


FROM 

(
SELECT 
CYCLE_DT as CYCLE_DT, 
CAST( TRUNC(SUM(CASE WHEN FY_RNWL_YR_COMP_CD='FRSTYEAR' THEN COMP_AMT ELSE 0.00 END ) ,2)AS VARCHAR(100) ) AS FYC_AMT,
CAST( TRUNC(SUM(CASE WHEN FY_RNWL_YR_COMP_CD = 'RENEWAL' OR (FY_RNWL_YR_COMP_CD = '' AND SRC_SYS_ID = 119) THEN COMP_AMT ELSE 0.00 END ) ,2) AS VARCHAR(100)) AS RYC_AMT,
CAST( TRUNC(SUM(WCC_AMT),2) AS VARCHAR(100) ) AS WCC_AMT,

'NA' AS UNKWN_PROD_FYC_AMT,
'NA' AS UNKWN_PROD_RYC_AMT,
'NA' AS UNKWN_PROD_WCC_AMT,

'NA' AS UNKWN_CBO_FYC_AMT,
'NA' AS UNKWN_CBO_RYC_AMT,
'NA' AS UNKWN_CBO_WCC_AMT, 

'NA' AS UNKWN_UNIT_FYC_AMT,
'NA' AS UNKWN_UNIT_RYC_AMT,
'NA' AS UNKWN_UNIT_WCC_AMT,

'NA' AS UNKWN_AGMT_FYC_AMT,
'NA' AS UNKWN_AGMT_RYC_AMT,
'NA' AS UNKWN_AGMT_WCC_AMT


FROM PROD_STND_TBLS.AGMT_COMM_TXN AGMT
WHERE CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )
AND SRC_SYS_ID = 59 AND TRIM(UPPER(COMP_PLAN_CD)) NOT IN ('TRN2P','VAEVP')
GROUP BY CYCLE_DT  
) EDW 

CROSS JOIN 
(
SELECT 'FYC_AMT' AS METRIC_NAME
UNION 
SELECT 'RYC_AMT'
UNION 
SELECT 'WCC_AMT'
UNION 
SELECT 'UNKWN_PROD_FYC_AMT'
UNION 
SELECT 'UNKWN_PROD_RYC_AMT'
UNION
SELECT 'UNKWN_PROD_WCC_AMT' 
UNION
SELECT 'UNKWN_CBO_FYC_AMT'
UNION 
SELECT 'UNKWN_CBO_RYC_AMT'
UNION
SELECT 'UNKWN_CBO_WCC_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYC_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYC_AMT'
UNION
SELECT 'UNKWN_UNIT_WCC_AMT'
UNION
SELECT 'UNKWN_AGMT_FYC_AMT'
UNION
SELECT 'UNKWN_AGMT_RYC_AMT'
UNION
SELECT 'UNKWN_AGMT_WCC_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'WCC_AMT', WCC_AMT, 
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_PROD_WCC_AMT', UNKWN_PROD_WCC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_CBO_WCC_AMT', UNKWN_CBO_WCC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_UNIT_WCC_AMT', UNKWN_UNIT_WCC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT', UNKWN_AGMT_RYC_AMT,
'UNKWN_AGMT_WCC_AMT', UNKWN_AGMT_WCC_AMT
) IS NOT NULL 

)SRC 
ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME 
 where  TGT.TARGET_VALUE>5000;

/*-----------------------------------------------------------------------------------*/

-- COMM_FACT MMLIA COMMISSIONS --    

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT 
TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, TGT.Business_Name AS Business_Name, 
SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,
TGT.Cycle_date AS Cycle_date,CURRENT_TIMESTAMP as LST_MOD_TS 

FROM  

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'COMM_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'MMLIA Commissions' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , 'FYC Amount', 
'RYC_AMT', 'RYC Amount',
'UNKWN_PROD_FYC_AMT', 'Unknown Product FYC Amount',
'UNKWN_PROD_RYC_AMT', 'Unknown Product RYC Amount',
'UNKWN_CBO_FYC_AMT', 'Unknown CBO FYC Amount',
'UNKWN_CBO_RYC_AMT', 'Unknown CBO RYC Amount',
'UNKWN_UNIT_FYC_AMT', 'Unknown Unit FYC Amount',
'UNKWN_UNIT_RYC_AMT', 'Unknown Unit RYC Amount',
'UNKWN_AGMT_FYC_AMT', 'Unknown Agreement FYC Amount',
'UNKWN_AGMT_RYC_AMT', 'Unknown Agreement RYC Amount'
) AS METRIC_NAME , 

CAST( TRUNC(
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT',UNKWN_AGMT_RYC_AMT
) ,2) AS VARCHAR(100) ) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, 
SUM(COMM_AMT_FYC) AS FYC_AMT,
SUM(COMM_AMT_REN) AS RYC_AMT,

SUM(CASE WHEN PROD_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_PROD_FYC_AMT,
SUM(CASE WHEN PROD_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_PROD_RYC_AMT,

SUM(CASE WHEN CNTR_CDE = '-1' THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_CBO_FYC_AMT,
SUM(CASE WHEN CNTR_CDE = '-1' THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_CBO_RYC_AMT,

SUM(CASE WHEN UNIT_MA_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_UNIT_FYC_AMT,
SUM(CASE WHEN UNIT_MA_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_UNIT_RYC_AMT,

SUM(CASE WHEN AGMT_SID = -1 THEN COMM_AMT_FYC ELSE 0.00 END )   AS UNKWN_AGMT_FYC_AMT,
SUM(CASE WHEN AGMT_SID = -1 THEN COMM_AMT_REN ELSE 0.00 END )  AS UNKWN_AGMT_RYC_AMT

FROM PROD_USIG_CRCOG_DM.COMM_FACT FACT  
JOIN PROD_USIG_CRCOG_DM.TXN_TYP T ON FACT.COMM_TXN_TYP_SID = T.TXN_TYP_SID  
WHERE SRC_SYS_ID IN (140, 141,142, 167) AND FACT.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )  
GROUP BY FACT.CYCLE_DT  
) FACT 

CROSS JOIN 
(
SELECT 'FYC_AMT' AS METRIC_NAME
UNION 
SELECT 'RYC_AMT'
UNION 
SELECT 'UNKWN_PROD_FYC_AMT'
UNION 
SELECT 'UNKWN_PROD_RYC_AMT'
UNION
SELECT 'UNKWN_CBO_FYC_AMT'
UNION 
SELECT 'UNKWN_CBO_RYC_AMT'
UNION
SELECT 'UNKWN_UNIT_FYC_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYC_AMT'
UNION
SELECT 'UNKWN_AGMT_FYC_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYC_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT',UNKWN_AGMT_RYC_AMT
) IS NOT NULL 


 )TGT 
 
 
 JOIN
 
 
( 
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'COMM_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'MMLIA Commissions' AS Rec_Type,
EDW.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , 'FYC Amount', 
'RYC_AMT', 'RYC Amount',
'UNKWN_PROD_FYC_AMT', 'Unknown Product FYC Amount',
'UNKWN_PROD_RYC_AMT', 'Unknown Product RYC Amount',
'UNKWN_CBO_FYC_AMT', 'Unknown CBO FYC Amount',
'UNKWN_CBO_RYC_AMT', 'Unknown CBO RYC Amount',
'UNKWN_UNIT_FYC_AMT', 'Unknown Unit FYC Amount',
'UNKWN_UNIT_RYC_AMT', 'Unknown Unit RYC Amount',
'UNKWN_AGMT_FYC_AMT', 'Unknown Agreement FYC Amount',
'UNKWN_AGMT_RYC_AMT', 'Unknown Agreement RYC Amount'
) AS METRIC_NAME , 

CAST(
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT',UNKWN_AGMT_RYC_AMT
) AS VARCHAR(100) )
AS SOURCE_VALUE


FROM 

(
SELECT 
CYCLE_DT as CYCLE_DT, 
CAST( TRUNC(SUM(CASE WHEN FY_RNWL_YR_COMP_CD='FRSTYEAR' THEN COMP_AMT ELSE 0.00 END ),2) AS VARCHAR(100) ) AS FYC_AMT,
CAST( TRUNC(SUM(CASE WHEN FY_RNWL_YR_COMP_CD = 'RENEWAL' OR (FY_RNWL_YR_COMP_CD = '' AND SRC_SYS_ID = 119) THEN COMP_AMT ELSE 0.00 END ),2) AS VARCHAR(100) ) AS RYC_AMT,

'NA' AS UNKWN_PROD_FYC_AMT,
'NA' AS UNKWN_PROD_RYC_AMT,

'NA' AS UNKWN_CBO_FYC_AMT,
'NA' AS UNKWN_CBO_RYC_AMT,

'NA' AS UNKWN_UNIT_FYC_AMT,
'NA' AS UNKWN_UNIT_RYC_AMT,

'NA'AS UNKWN_AGMT_FYC_AMT,
'NA'AS UNKWN_AGMT_RYC_AMT

FROM PROD_STND_TBLS.AGMT_COMM_TXN AGMT
WHERE CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )
AND SRC_SYS_ID IN (140, 141,142, 167)  AND TRIM(UPPER(COMP_PLAN_CD)) NOT IN ('TRN2P','VAEVP')
GROUP BY CYCLE_DT  
) EDW 

CROSS JOIN 
(
SELECT 'FYC_AMT' AS METRIC_NAME
UNION 
SELECT 'RYC_AMT'
UNION 
SELECT 'UNKWN_PROD_FYC_AMT'
UNION 
SELECT 'UNKWN_PROD_RYC_AMT'
UNION
SELECT 'UNKWN_CBO_FYC_AMT'
UNION 
SELECT 'UNKWN_CBO_RYC_AMT'
UNION
SELECT 'UNKWN_UNIT_FYC_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYC_AMT'
UNION
SELECT 'UNKWN_AGMT_FYC_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYC_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'FYC_AMT' , FYC_AMT, 
'RYC_AMT', RYC_AMT,
'UNKWN_PROD_FYC_AMT', UNKWN_PROD_FYC_AMT,
'UNKWN_PROD_RYC_AMT', UNKWN_PROD_RYC_AMT,
'UNKWN_CBO_FYC_AMT', UNKWN_CBO_FYC_AMT,
'UNKWN_CBO_RYC_AMT', UNKWN_CBO_RYC_AMT,
'UNKWN_UNIT_FYC_AMT', UNKWN_UNIT_FYC_AMT,
'UNKWN_UNIT_RYC_AMT', UNKWN_UNIT_RYC_AMT,
'UNKWN_AGMT_FYC_AMT',UNKWN_AGMT_FYC_AMT,
'UNKWN_AGMT_RYC_AMT',UNKWN_AGMT_RYC_AMT
) IS NOT NULL 

)SRC 
ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME ; 


/*-----------------------------------------------------------------------------------*/

-- NADA_FACT -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT 
TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, TGT.Business_Name AS Business_Name, 
SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,TGT.Cycle_date AS Cycle_date,CURRENT_TIMESTAMP as LST_MOD_TS

FROM 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'NADA_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'NADA Commissions' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , 'Class Year1 NADA Eligibility FYC Amount', 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', 'Class Year2 NADA Eligibility FYC Amount',
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', 'Class Year3 NADA Eligibility FYC Amount', 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', 'Class Year4 NADA Eligibility FYC Amount'
) AS METRIC_NAME , 

CAST( TRUNC( 
DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT

),2) AS VARCHAR(100) ) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, ADVSR_NADA_CLS_YR,


SUM(CASE WHEN ADVSR_NADA_CLS_YR =1 THEN NADA_ELIG_FYC_AMT  END )   AS NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT,
SUM(CASE WHEN ADVSR_NADA_CLS_YR = 2 THEN NADA_ELIG_FYC_AMT  END )  AS NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
SUM(CASE WHEN ADVSR_NADA_CLS_YR = 3 THEN NADA_ELIG_FYC_AMT  END )  AS NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT,

SUM(CASE WHEN ADVSR_NADA_CLS_YR = 4 THEN NADA_ELIG_FYC_AMT  END )   AS NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT


FROM prod_usig_crcog_dm.NADA_FACT  FACT 
  
WHERE  FACT.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )  
GROUP BY 1,2
) FACT 

CROSS JOIN 
(
SELECT 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' AS METRIC_NAME
UNION 
SELECT 'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT'
UNION 
SELECT 'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT'
UNION 
SELECT 'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT

) IS NOT NULL )TGT

JOIN

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'NADA_FACT' as Table_Name,
'Fact' as table_Type ,
'Commissions' as Business_Name,
'NADA Commissions' AS Rec_Type,
FACT.CYCL_DT as Cycle_date, 


DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , 'Class Year1 NADA Eligibility FYC Amount', 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', 'Class Year2 NADA Eligibility FYC Amount',
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', 'Class Year3 NADA Eligibility FYC Amount', 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', 'Class Year4 NADA Eligibility FYC Amount'
) AS METRIC_NAME , 

CAST( TRUNC(
DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT

),2) AS VARCHAR(100) ) AS SOURCE_VALUE

FROM 

(
SELECT 
CYCL_DT, AGT_SVC_YR,


SUM(CASE WHEN AGT_SVC_YR =1 THEN NADA_ELIG_FYC  END )   AS NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT,
SUM(CASE WHEN AGT_SVC_YR = 2 THEN NADA_ELIG_FYC  END )  AS NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
SUM(CASE WHEN AGT_SVC_YR = 3 THEN NADA_ELIG_FYC  END )  AS NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT,

SUM(CASE WHEN AGT_SVC_YR = 4 THEN NADA_ELIG_FYC  END )   AS NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT


FROM prod_stnd_prty.NADA  FACT 
  
WHERE  FACT.CYCL_DT = ( SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )  
GROUP BY 1,2
) FACT 

CROSS JOIN 
(
SELECT 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' AS METRIC_NAME
UNION 
SELECT 'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT'
UNION 
SELECT 'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT'
UNION 
SELECT 'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 'NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT' , NADA_CLASS_YEAR_1_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_2_ELGI_FYC_AMOUNT,
'NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_3_ELGI_FYC_AMOUNT, 
'NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT', NADA_CLASS_YEAR_4_ELGI_FYC_AMOUNT

) IS NOT NULL )
SRC

 
ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME ; 

/*-----------------------------------------------------------------------------------*/

-- PREMIUM_FACT MMLIA PREMIUMS -- 


INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)



SELECT  
TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, TGT.Business_Name AS Business_Name, 
SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,TGT.Cycle_date AS Cycle_date,CURRENT_TIMESTAMP as LST_MOD_TS 
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'PREMIUM_FACT' as Table_Name,
'Fact' as table_Type ,
'Premiums' as Business_Name,
'MMLIA Premiums' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 
DECODE(METRIC.METRIC_NAME, 'FYP_AMT' , 'FYP Amount', 
'RYP_AMT', 'RYP Amount',
'POL_CR','POL_CR Amount',
'VOL_AMT', 'VOL Amount', 
'UNKWN_PROD_FYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_RYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_POL_CR_AMT','Unknown Product POL_CR Amount',
'UNKWN_PROD_VOL_AMT','Unknown Product VOL Amount',
'UNKWN_CBO_FYP_AMT','Unknown CBO FYP Amount',
'UNKWN_CBO_RYP_AMT','Unknown CBO RYP Amount',
'UNKWN_CBO_POL_CR_AMT','Unknown CBO POL_CR Amount',
'UNKWN_CBO_VOL_AMT','Unknown CBO VOL Amount',
'UNKWN_UNIT_FYP_AMT','Unknown UNIT FYP Amount',
'UNKWN_UNIT_RYP_AMT','Unknown UNIT RYP Amount',
'UNKWN_UNIT_POL_CR_AMT','Unknown UNIT POL_CR Amount',
'UNKWN_UNIT_VOL_AMT','Unknown UNIT VOL Amount',
'UNKWN_AGMT_FYP_AMT','Unknown Agreement FYP Amount',
'UNKWN_AGMT_RYP_AMT','Unknown Agreement RYP Amount',
'UNKWN_AGMT_POL_CR_AMT','Unknown Agreement POL_CR Amount',
'UNKWN_AGMT_VOL_AMT','Unknown Agreement VOL Amount'
) AS METRIC_NAME , 

CAST( CAST(
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT  ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
)as decimal(17,2)) AS VARCHAR(100) ) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, 
CAST(cast(SUM(PREM_AMT_FY)as decimal(17,2)) AS VARCHAR(100)) FYP_AMT,
CAST(cast(SUM (PREM_AMT_REN)as decimal(17,2)) AS VARCHAR(100)) AS RYP_AMT,
CAST(cast(SUM (POL_CR_AMT)as decimal(17,2)) AS VARCHAR(100)) AS POL_CR,
CAST(cast(SUM(VOL_AMT)as decimal(17,2)) AS VARCHAR(100)) as VOL_AMT,

CAST(cast(SUM(CASE WHEN PROD_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END )as decimal(17,2))  AS VARCHAR(100)) AS UNKWN_PROD_FYP_AMT,
CAST(cast(SUM(CASE WHEN PROD_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_PROD_RYP_AMT,
CAST(cast(SUM(CASE WHEN PROD_SID = -1 THEN POL_CR_AMT ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_PROD_POL_CR_AMT,
CAST(cast(SUM(CASE WHEN PROD_SID = -1 THEN VOL_AMT ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_PROD_VOL_AMT,

CAST(cast(SUM(CASE WHEN CNTR_CDE = '-1' THEN PREM_AMT_FY ELSE 0.00 END )   as  decimal(17,2))  AS VARCHAR(100)) AS UNKWN_CBO_FYP_AMT,
CAST(cast(SUM(CASE WHEN CNTR_CDE = '-1' THEN PREM_AMT_REN ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_CBO_RYP_AMT,
CAST(cast(SUM(CASE WHEN CNTR_CDE = '-1' THEN POL_CR_AMT ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_CBO_POL_CR_AMT, 
CAST(cast(SUM(CASE WHEN CNTR_CDE = '-1' THEN VOL_AMT ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100)) AS  UNKWN_CBO_VOL_AMT,

CAST(cast(SUM(CASE WHEN UNIT_MA_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100))  AS UNKWN_UNIT_FYP_AMT,
CAST(cast(SUM(CASE WHEN UNIT_MA_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_UNIT_RYP_AMT,
CAST(cast(SUM(CASE WHEN UNIT_MA_SID = -1 THEN POL_CR_AMT ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_UNIT_POL_CR_AMT,
CAST(cast(SUM(CASE WHEN UNIT_MA_SID = -1 THEN VOL_AMT ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_UNIT_VOL_AMT,

CAST(cast(SUM(CASE WHEN AGMT_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_AGMT_FYP_AMT,
CAST(cast(SUM(CASE WHEN AGMT_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100))  AS UNKWN_AGMT_RYP_AMT,
CAST(cast(SUM(CASE WHEN AGMT_SID = -1 THEN POL_CR_AMT ELSE 0.00 END ) as decimal(17,2)) AS VARCHAR(100)) AS UNKWN_AGMT_POL_CR_AMT,
CAST(cast(SUM(CASE WHEN AGMT_SID = -1 THEN VOL_AMT ELSE 0.00 END )as decimal(17,2)) AS VARCHAR(100))  AS UNKWN_AGMT_VOL_AMT

 

FROM PROD_USIG_CRCOG_DM_RPTG_VW.PREMIUM_FACT_VW FACT 
JOIN PROD_USIG_CRCOG_DM.TXN_TYP TXN ON TXN.TXN_TYP_SID=FACT.PREM_TXN_TYP_SID
WHERE TXN.SRC_SYS_ID IN (140,141,142,167) 
AND FACT.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL ) 
GROUP BY 1  
) FACT 

CROSS JOIN 
(

SELECT 'FYP_AMT' AS METRIC_NAME
UNION 
SELECT 'RYP_AMT'
UNION 
SELECT 'POL_CR'
UNION 
SELECT 'VOL_AMT'
UNION 
SELECT 'UNKWN_PROD_FYP_AMT'
UNION 
SELECT 'UNKWN_PROD_RYP_AMT'
UNION
SELECT 'UNKWN_PROD_POL_CR_AMT' 
UNION
SELECT 'UNKWN_PROD_VOL_AMT' 
UNION
SELECT 'UNKWN_CBO_FYP_AMT'
UNION 
SELECT 'UNKWN_CBO_RYP_AMT'
UNION
SELECT 'UNKWN_CBO_POL_CR_AMT'
UNION 
SELECT 'UNKWN_CBO_VOL_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYP_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYP_AMT'
UNION
SELECT 'UNKWN_UNIT_POL_CR_AMT'
UNION
SELECT 'UNKWN_UNIT_VOL_AMT'
UNION 
SELECT 'UNKWN_AGMT_FYP_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYP_AMT'
UNION
SELECT 'UNKWN_AGMT_POL_CR_AMT'
UNION
SELECT 'UNKWN_AGMT_VOL_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) IS NOT NULL 

) TGT 



JOIN 



(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'PREMIUM_FACT' as Table_Name,
'Fact' as table_Type ,
'Premiums' as Business_Name,
'MMLIA Premiums' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYP_AMT' , 'FYP Amount', 
'RYP_AMT', 'RYP Amount',
'POL_CR','POL_CR Amount',
'VOL_AMT', 'VOL Amount', 
'UNKWN_PROD_FYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_RYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_POL_CR_AMT','Unknown Product POL_CR Amount',
'UNKWN_PROD_VOL_AMT','Unknown Product VOL Amount',
'UNKWN_CBO_FYP_AMT','Unknown CBO FYP Amount',
'UNKWN_CBO_RYP_AMT','Unknown CBO RYP Amount',
'UNKWN_CBO_POL_CR_AMT','Unknown CBO POL_CR Amount',
'UNKWN_CBO_VOL_AMT','Unknown CBO VOL Amount',
'UNKWN_UNIT_FYP_AMT','Unknown UNIT FYP Amount',
'UNKWN_UNIT_RYP_AMT','Unknown UNIT RYP Amount',
'UNKWN_UNIT_POL_CR_AMT','Unknown UNIT POL_CR Amount',
'UNKWN_UNIT_VOL_AMT','Unknown UNIT VOL Amount',
'UNKWN_AGMT_FYP_AMT','Unknown Agreement FYP Amount',
'UNKWN_AGMT_RYP_AMT','Unknown Agreement RYP Amount',
'UNKWN_AGMT_POL_CR_AMT','Unknown Agreement POL_CR Amount',
'UNKWN_AGMT_VOL_AMT','Unknown Agreement VOL Amount'
) AS METRIC_NAME , 

CAST( 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) AS VARCHAR(100) ) AS SOURCE_VALUE

FROM 

(
SELECT 
DATE(ADMIN_TRANSACTION_DT) as CYCLE_DT, 
CAST(cast(SUM (FY_PREM_AMT)as decimal(17,2)) as   VARCHAR(100)) as  FYP_AMT,
CAST(cast(SUM (RY_PREM_AMT)as  decimal(17,2)) as VARCHAR(100)) AS RYP_AMT,
CAST(cast(SUM (FACE_AMT)as  decimal(17,2)) as VARCHAR(100)) AS VOL_AMT,
'NA'  AS POL_CR,

'NA'  AS UNKWN_PROD_FYP_AMT,
'NA' AS UNKWN_PROD_RYP_AMT,
'NA'  AS UNKWN_PROD_POL_CR_AMT,
'NA'  AS UNKWN_PROD_VOL_AMT,

'NA'   AS UNKWN_CBO_FYP_AMT,
'NA'  AS UNKWN_CBO_RYP_AMT,
'NA'  AS UNKWN_CBO_POL_CR_AMT, 
'NA'  AS  UNKWN_CBO_VOL_AMT,

'NA'   AS UNKWN_UNIT_FYP_AMT,
'NA'  AS UNKWN_UNIT_RYP_AMT,
'NA'  AS UNKWN_UNIT_POL_CR_AMT,
'NA'  AS UNKWN_UNIT_VOL_AMT,

'NA'   AS UNKWN_AGMT_FYP_AMT,
'NA'  AS UNKWN_AGMT_RYP_AMT,
'NA'  AS UNKWN_AGMT_POL_CR_AMT,
'NA'  AS UNKWN_AGMT_VOL_AMT
  
  

FROM PROD_STND_CRCOG_TBLS.MMLIA_AGMT_PREM A 

WHERE DATE(ADMIN_TRANSACTION_DT)= (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL)  
AND SRC_SYS_ID IN (140,141,142,167)
group by 1
) FACT 

CROSS JOIN 
(

SELECT 'FYP_AMT' AS METRIC_NAME
UNION 
SELECT 'RYP_AMT'
UNION 
SELECT 'POL_CR'
UNION 
SELECT 'VOL_AMT'
UNION 
SELECT 'UNKWN_PROD_FYP_AMT'
UNION 
SELECT 'UNKWN_PROD_RYP_AMT'
UNION
SELECT 'UNKWN_PROD_POL_CR_AMT' 
UNION
SELECT 'UNKWN_PROD_VOL_AMT' 
UNION
SELECT 'UNKWN_CBO_FYP_AMT'
UNION 
SELECT 'UNKWN_CBO_RYP_AMT'
UNION
SELECT 'UNKWN_CBO_POL_CR_AMT'
UNION 
SELECT 'UNKWN_CBO_VOL_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYP_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYP_AMT'
UNION
SELECT 'UNKWN_UNIT_POL_CR_AMT'
UNION
SELECT 'UNKWN_UNIT_VOL_AMT'
UNION 
SELECT 'UNKWN_AGMT_FYP_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYP_AMT'
UNION
SELECT 'UNKWN_AGMT_POL_CR_AMT'
UNION
SELECT 'UNKWN_AGMT_VOL_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) IS NOT NULL 
) SRC

ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME ; 

------------------------------------x----------------------------
/*-----------------------------------------------------------------------------------*/

-- PREMIUM_FACT POL_RCOG Premiums -- 


INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT 
TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, TGT.Business_Name AS Business_Name, 
SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,TGT.Cycle_date AS Cycle_date,CURRENT_TIMESTAMP as LST_MOD_TS 
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'PREMIUM_FACT' as Table_Name,
'Fact' as table_Type ,
'Premiums' as Business_Name,
'POL_RCOG Premiums' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYP_AMT' , 'FYP Amount', 
'RYP_AMT', 'RYP Amount',
'POL_CR','POL_CR Amount',
'VOL_AMT', 'VOL Amount', 
'UNKWN_PROD_FYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_RYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_POL_CR_AMT','Unknown Product POL_CR Amount',
'UNKWN_PROD_VOL_AMT','Unknown Product VOL Amount',
'UNKWN_CBO_FYP_AMT','Unknown CBO FYP Amount',
'UNKWN_CBO_RYP_AMT','Unknown CBO RYP Amount',
'UNKWN_CBO_POL_CR_AMT','Unknown CBO POL_CR Amount',
'UNKWN_CBO_VOL_AMT','Unknown CBO VOL Amount',
'UNKWN_UNIT_FYP_AMT','Unknown UNIT FYP Amount',
'UNKWN_UNIT_RYP_AMT','Unknown UNIT RYP Amount',
'UNKWN_UNIT_POL_CR_AMT','Unknown UNIT POL_CR Amount',
'UNKWN_UNIT_VOL_AMT','Unknown UNIT VOL Amount',
'UNKWN_AGMT_FYP_AMT','Unknown Agreement FYP Amount',
'UNKWN_AGMT_RYP_AMT','Unknown Agreement RYP Amount',
'UNKWN_AGMT_POL_CR_AMT','Unknown Agreement POL_CR Amount',
'UNKWN_AGMT_VOL_AMT','Unknown Agreement VOL Amount'
) AS METRIC_NAME , 

CAST( 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) AS VARCHAR(100) ) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, 
cast(CAST(SUM (PREM_AMT_FY) AS NUMERIC(100,2)) AS varchar(100)) AS  FYP_AMT,

cast(CAST(SUM (PREM_AMT_REN) AS NUMERIC(100,2)) AS varchar(100)) AS RYP_AMT,
CAST(CAST(SUM (POL_CR_AMT) AS NUMERIC(100,2)) AS varchar(100))  AS POL_CR,
CAST(CAST(SUM(VOL_AMT) AS NUMERIC(100,2)) AS varchar(100)) as VOL_AMT,

CAST(CAST(SUM(CASE WHEN PROD_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END ) AS NUMERIC(100,2))  AS varchar(100)) AS UNKWN_PROD_FYP_AMT,
CAST(CAST(SUM(CASE WHEN PROD_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_PROD_RYP_AMT,
CAST(CAST(SUM(CASE WHEN PROD_SID = -1 THEN POL_CR_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_PROD_POL_CR_AMT,
CAST(CAST(SUM(CASE WHEN PROD_SID = -1 THEN VOL_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_PROD_VOL_AMT,

CAST(CAST(SUM(CASE WHEN CNTR_CDE = '-1' THEN PREM_AMT_FY ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100))  AS UNKWN_CBO_FYP_AMT,
CAST(CAST(SUM(CASE WHEN CNTR_CDE = '-1' THEN PREM_AMT_REN ELSE 0.00 END )AS NUMERIC(100,2))  AS varchar(100)) AS UNKWN_CBO_RYP_AMT,
CAST(CAST(SUM(CASE WHEN CNTR_CDE = '-1' THEN POL_CR_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_CBO_POL_CR_AMT, 
CAST(CAST(SUM(CASE WHEN CNTR_CDE = '-1' THEN VOL_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS  UNKWN_CBO_VOL_AMT,

CAST(CAST(SUM(CASE WHEN UNIT_MA_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_UNIT_FYP_AMT,
CAST(CAST(SUM(CASE WHEN UNIT_MA_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_UNIT_RYP_AMT,
CAST(CAST(SUM(CASE WHEN UNIT_MA_SID = -1 THEN POL_CR_AMT ELSE 0.00 END )AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_UNIT_POL_CR_AMT,
CAST(CAST(SUM(CASE WHEN UNIT_MA_SID = -1 THEN VOL_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_UNIT_VOL_AMT,


CAST(CAST(SUM(CASE WHEN AGMT_SID = -1 THEN PREM_AMT_FY ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_AGMT_FYP_AMT,
CAST(CAST(SUM(CASE WHEN AGMT_SID = -1 THEN PREM_AMT_REN ELSE 0.00 END )AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_AGMT_RYP_AMT,
CAST(CAST(SUM(CASE WHEN AGMT_SID = -1 THEN POL_CR_AMT ELSE 0.00 END )AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_AGMT_POL_CR_AMT,
CAST(CAST(SUM(CASE WHEN AGMT_SID = -1 THEN VOL_AMT ELSE 0.00 END ) AS NUMERIC(100,2)) AS varchar(100)) AS UNKWN_AGMT_VOL_AMT
 
 

FROM PROD_USIG_CRCOG_DM_RPTG_VW.PREMIUM_FACT_VW FACT 
JOIN PROD_USIG_CRCOG_DM.TXN_TYP TXN ON TXN.TXN_TYP_SID=FACT.PREM_TXN_TYP_SID
WHERE TXN.SRC_SYS_ID IN (106,144,145,148,149,150,135,160,158,165,169,170,172,175,183)  
AND FACT.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL )  
GROUP BY 1  
) FACT 

CROSS JOIN 
(

SELECT 'FYP_AMT' AS METRIC_NAME
UNION 
SELECT 'RYP_AMT'
UNION 
SELECT 'POL_CR'
UNION 
SELECT 'VOL_AMT'
UNION 
SELECT 'UNKWN_PROD_FYP_AMT'
UNION 
SELECT 'UNKWN_PROD_RYP_AMT'
UNION
SELECT 'UNKWN_PROD_POL_CR_AMT' 
UNION
SELECT 'UNKWN_PROD_VOL_AMT' 
UNION
SELECT 'UNKWN_CBO_FYP_AMT'
UNION 
SELECT 'UNKWN_CBO_RYP_AMT'
UNION
SELECT 'UNKWN_CBO_POL_CR_AMT'
UNION 
SELECT 'UNKWN_CBO_VOL_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYP_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYP_AMT'
UNION
SELECT 'UNKWN_UNIT_POL_CR_AMT'
UNION
SELECT 'UNKWN_UNIT_VOL_AMT'
UNION 
SELECT 'UNKWN_AGMT_FYP_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYP_AMT'
UNION
SELECT 'UNKWN_AGMT_POL_CR_AMT'
UNION
SELECT 'UNKWN_AGMT_VOL_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) IS NOT NULL 

) TGT 



JOIN 



(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'PREMIUM_FACT' as Table_Name,
'Fact' as table_Type ,
'Premiums' as Business_Name,
'POL_RCOG Premiums' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'FYP_AMT' , 'FYP Amount', 
'RYP_AMT', 'RYP Amount',
'POL_CR','POL_CR Amount',
'VOL_AMT', 'VOL Amount', 
'UNKWN_PROD_FYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_RYP_AMT', 'Unknown Product FYP Amount',
'UNKWN_PROD_POL_CR_AMT','Unknown Product POL_CR Amount',
'UNKWN_PROD_VOL_AMT','Unknown Product VOL Amount',
'UNKWN_CBO_FYP_AMT','Unknown CBO FYP Amount',
'UNKWN_CBO_RYP_AMT','Unknown CBO RYP Amount',
'UNKWN_CBO_POL_CR_AMT','Unknown CBO POL_CR Amount',
'UNKWN_CBO_VOL_AMT','Unknown CBO VOL Amount',
'UNKWN_UNIT_FYP_AMT','Unknown UNIT FYP Amount',
'UNKWN_UNIT_RYP_AMT','Unknown UNIT RYP Amount',
'UNKWN_UNIT_POL_CR_AMT','Unknown UNIT POL_CR Amount',
'UNKWN_UNIT_VOL_AMT','Unknown UNIT VOL Amount',
'UNKWN_AGMT_FYP_AMT','Unknown Agreement FYP Amount',
'UNKWN_AGMT_RYP_AMT','Unknown Agreement RYP Amount',
'UNKWN_AGMT_POL_CR_AMT','Unknown Agreement POL_CR Amount',
'UNKWN_AGMT_VOL_AMT','Unknown Agreement VOL Amount'
) AS METRIC_NAME , 

CAST( 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) AS VARCHAR(100) ) AS SOURCE_VALUE

FROM 

(
SELECT 
DATE(TRANS_DT) as CYCLE_DT, 
CAST(CAST(SUM (PREM_CR) AS NUMERIC(100,2)) as   VARCHAR(100)) as  FYP_AMT,
CAST(CAST(SUM (RY_PREMIUM)AS NUMERIC(100,2)) as VARCHAR(100)) AS RYP_AMT,
CAST(CAST(SUM (POL_CR)AS NUMERIC(100,2)) as VARCHAR(100)) AS POL_CR,
CAST(CAST(SUM(VOL_CR) AS NUMERIC(100,2)) as  VARCHAR(100)) as VOL_AMT,

'NA'  AS UNKWN_PROD_FYP_AMT,
'NA' AS UNKWN_PROD_RYP_AMT,
'NA'  AS UNKWN_PROD_POL_CR_AMT,
'NA'  AS UNKWN_PROD_VOL_AMT,

'NA'   AS UNKWN_CBO_FYP_AMT,
'NA'  AS UNKWN_CBO_RYP_AMT,
'NA'  AS UNKWN_CBO_POL_CR_AMT, 
'NA'  AS  UNKWN_CBO_VOL_AMT,

'NA'   AS UNKWN_UNIT_FYP_AMT,
'NA'  AS UNKWN_UNIT_RYP_AMT,
'NA'  AS UNKWN_UNIT_POL_CR_AMT,
'NA'  AS UNKWN_UNIT_VOL_AMT,

'NA'   AS UNKWN_AGMT_FYP_AMT,
'NA'  AS UNKWN_AGMT_RYP_AMT,
'NA'  AS UNKWN_AGMT_POL_CR_AMT,
'NA'  AS UNKWN_AGMT_VOL_AMT
  
FROM PROD_STND_TBLS.POL_RCOG_CR A
WHERE DATE(A.TRANS_DT)= (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL)  
AND SRC_SYS_ID IN (106,144,145,148,149,150,135,160,158,165,169,170,172,175,183)
group by 1
) FACT 

CROSS JOIN 
(

SELECT 'FYP_AMT' AS METRIC_NAME
UNION 
SELECT 'RYP_AMT'
UNION 
SELECT 'POL_CR'
UNION 
SELECT 'VOL_AMT'
UNION 
SELECT 'UNKWN_PROD_FYP_AMT'
UNION 
SELECT 'UNKWN_PROD_RYP_AMT'
UNION
SELECT 'UNKWN_PROD_POL_CR_AMT' 
UNION
SELECT 'UNKWN_PROD_VOL_AMT' 
UNION
SELECT 'UNKWN_CBO_FYP_AMT'
UNION 
SELECT 'UNKWN_CBO_RYP_AMT'
UNION
SELECT 'UNKWN_CBO_POL_CR_AMT'
UNION 
SELECT 'UNKWN_CBO_VOL_AMT'
UNION 
SELECT 'UNKWN_UNIT_FYP_AMT'
UNION 
SELECT 'UNKWN_UNIT_RYP_AMT'
UNION
SELECT 'UNKWN_UNIT_POL_CR_AMT'
UNION
SELECT 'UNKWN_UNIT_VOL_AMT'
UNION 
SELECT 'UNKWN_AGMT_FYP_AMT'
UNION 
SELECT 'UNKWN_AGMT_RYP_AMT'
UNION
SELECT 'UNKWN_AGMT_POL_CR_AMT'
UNION
SELECT 'UNKWN_AGMT_VOL_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'FYP_AMT' ,  FYP_AMT,                        
'RYP_AMT',  RYP_AMT,                           
'POL_CR',     POL_CR,                         
'VOL_AMT',   VOL_AMT,                          
'UNKWN_PROD_FYP_AMT',  UNKWN_PROD_FYP_AMT,                
'UNKWN_PROD_RYP_AMT',   UNKWN_PROD_RYP_AMT,                                                    
'UNKWN_PROD_POL_CR_AMT',UNKWN_PROD_POL_CR_AMT,                                                         
'UNKWN_PROD_VOL_AMT',     UNKWN_PROD_VOL_AMT,                                                 
'UNKWN_CBO_FYP_AMT',    UNKWN_CBO_FYP_AMT,               
'UNKWN_CBO_RYP_AMT', UNKWN_CBO_RYP_AMT,                  
'UNKWN_CBO_POL_CR_AMT',  UNKWN_CBO_POL_CR_AMT,              
'UNKWN_CBO_VOL_AMT',    UNKWN_CBO_VOL_AMT,               
'UNKWN_UNIT_FYP_AMT',       UNKWN_UNIT_FYP_AMT,           
'UNKWN_UNIT_RYP_AMT',UNKWN_UNIT_RYP_AMT,                  
'UNKWN_UNIT_POL_CR_AMT',  UNKWN_UNIT_POL_CR_AMT,             
'UNKWN_UNIT_VOL_AMT',   UNKWN_UNIT_VOL_AMT ,
'UNKWN_AGMT_FYP_AMT',       UNKWN_AGMT_FYP_AMT,           
'UNKWN_AGMT_RYP_AMT',UNKWN_AGMT_RYP_AMT,                  
'UNKWN_AGMT_POL_CR_AMT',  UNKWN_AGMT_POL_CR_AMT,             
'UNKWN_AGMT_VOL_AMT',   UNKWN_AGMT_VOL_AMT
) IS NOT NULL 
) SRC

ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME ; 

/*-----------------------------------------------------------------------------------*/
                             
-- DTCH_OFC  -- Daily  -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

select 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'DTCH_OFC' as Tbl_Nm,
'Fact' as tbl_Typ_nm ,
'Detached Office' as Bus_Nm,
'Detached Office Count' AS RCRD_TYP_NM,
CYCLE_DT as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC','Invalid Detached Office Id Count'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC',COUNT_DTCH_OFC            
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(
SELECT 
( SELECT MAX(CAL_DT) FROM prod_usig_crcog_dm.CAL ) AS CYCLE_DT,  
COUNT( DISTINCT DTCH_OFC_ID) as COUNT_DTCH_OFC
FROM prod_usig_crcog_dm.DTCH_OFC
where DTCH_OFC_ID<>'UNKWN'
GROUP BY 1
) FACT 

CROSS JOIN 
(

SELECT 'COUNT_DTCH_OFC' AS METRIC_NM

) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC' ,  COUNT_DTCH_OFC 
) IS NOT NULL 

) TGT 


JOIN 


(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'DTCH_OFC' as Tbl_Nm,
'Fact' as tbl_Typ_nm ,
'Detached Office' as Bus_Nm,
'Detached Office Count' AS RCRD_TYP_NM,
CYCLE_DT as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC','Invalid Detached Office Id Count'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC',COUNT_DTCH_OFC            
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(
SELECT
CAST( MAX(TRANS_DT) AS DATE)  AS CYCLE_DT,
COUNT( DISTINCT DTCHD_OFC_ID) as COUNT_DTCH_OFC
FROM PROD_STND_PRTY.DTCHD_OFC 
) FACT 

CROSS JOIN 
(
SELECT 'COUNT_DTCH_OFC' AS METRIC_NM
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'COUNT_DTCH_OFC' ,COUNT_DTCH_OFC
) IS NOT NULL 
) SRC 
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) AND SRC.CYCLE_DT=TGT.CYCLE_DT and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/ 

-- NFF_ACTV Daily Table -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NFF_ACTV' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Net Field Force' as Bus_Nm,
EDW.SRC_VAL AS SRC_VAL, 
FACT.TGT_VAL AS TGT_VAL, 
'NFF Active Advisor Counts' AS RCRD_TYP_NM,

CASE 
WHEN NFF_ACTV_CD = 'TRNRCTOT' THEN 'NFF Recruit Out Counts'
WHEN NFF_ACTV_CD = 'REINCAS' THEN 'NFF Reinstate Counts'
WHEN NFF_ACTV_CD = 'TERMCAS' THEN 'NFF Term Counts'
WHEN NFF_ACTV_CD = 'RECRUIT' THEN 'NFF Recruit Counts'
WHEN NFF_ACTV_CD = 'TRNCASIN' THEN 'NFF Transfer In Counts'
WHEN NFF_ACTV_CD = 'TRNCAROT' THEN 'NFF Transfer Out Counts'
WHEN NFF_ACTV_CD = 'TRNRCTIN' THEN 'NFF Recruit In Counts'
WHEN NFF_ACTV_CD = 'RCRTTERM' THEN 'NFF Recruit Term Counts'
WHEN NFF_ACTV_CD = 'SURVYE' THEN 'NFF Survey Counts'
END AS METRIC_NM, 

(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL ) AS Cycle_dt, 
CURRENT_TIMESTAMP AS LST_MOD_TS

FROM 
(
SELECT COUNT(DISTINCT ADVSR_SID) AS TGT_VAL, TRIM(UPPER(NFF_ACTV_CD)) AS NFF_ACTV_CD
from  PROD_USIG_CRCOG_DM.NFF_ACTV ACTV 
GROUP BY NFF_ACTV_CD
)FACT

JOIN 

(
SELECT  NFF_ACTV_CDE,
COUNT(DISTINCT NFF_AGT_CDE) AS SRC_VAL 
from  PROD_STND_PRTY.NFF_ACTV ACTV 
WHERE SRC_DEL_IND<>'Y'
GROUP BY NFF_ACTV_CDE
)EDW
ON FACT.NFF_ACTV_CD = EDW.NFF_ACTV_CDE ; 


/*-----------------------------------------------------------------------------------*/

-- RSNG_LDR_DLY_FACT -- Daily -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)



SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'RSNG_LDR_DLY_FACT' as TBL_NM,
'Fact' as tbl_Typ_nm ,
'Rising Leader' as bus_nm,
'Rising Leader Daily' AS RCRD_TYP_NM,
FACT.CYCLE_DT as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'POT_RSNG_LDR_IND' , 'Potential Rising Leader Indicator', 
'AAA_WCC_AMT', 'AAA WCC Amount',
'RSNG_LDR_LIVES_CNT', 'Rising Leader Lives Count'
) AS METRIC_NM , 

TRUNC(CAST( 
DECODE(METRIC.METRIC_NM, 
'POT_RSNG_LDR_IND' , POT_RSNG_LDR_IND, 
'AAA_WCC_AMT', AAA_WCC_AMT,
'RSNG_LDR_LIVES_CNT', RSNG_LDR_LIVES_CNT                             
) AS VARCHAR(100) ),2) AS TGT_VAL

FROM 

(
SELECT 
CYCLE_DT, 
CAST( CAST( SUM(AAA_WCC_AMT) AS DECIMAL(30,2) ) AS VARCHAR(100) ) AAA_WCC_AMT,
CAST( CAST( SUM(RSNG_LDR_LIVES_CNT) AS DECIMAL(30,2) ) AS VARCHAR(100) ) AS RSNG_LDR_LIVES_CNT,

CAST(COUNT(CASE WHEN POT_RSNG_LDR_IND='Y' THEN 1 ELSE NULL END ) AS VARCHAR(100)) as POT_RSNG_LDR_IND

FROM  PROD_USIG_CRCOG_DM.RSNG_LDR_DLY_FACT FACT
where FACT.CYCLE_DT = ( SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL ) 
GROUP BY 1  
) FACT 

CROSS JOIN 
(

SELECT 'POT_RSNG_LDR_IND' AS METRIC_NM
UNION 
SELECT 'AAA_WCC_AMT'
UNION 
SELECT 'RSNG_LDR_LIVES_CNT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'POT_RSNG_LDR_IND' , POT_RSNG_LDR_IND, 
'AAA_WCC_AMT', AAA_WCC_AMT,
'RSNG_LDR_LIVES_CNT', RSNG_LDR_LIVES_CNT
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'RSNG_LDR_DLY_FACT' as TBL_NM,
'Fact' as tbl_Typ_nm ,
'Rising Leader' as bus_nm,
'Rising Leader Daily' AS RCRD_TYP_NM,
FACT.CYCLE_DT as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'POT_RSNG_LDR_IND' ,'Potential Rising Leader Indicator', 
'AAA_WCC_AMT', 'AAA WCC Amount',
'RSNG_LDR_LIVES_CNT', 'Rising Leader Lives Count'
) AS METRIC_NM , 

DECODE(METRIC.METRIC_NM, 
'POT_RSNG_LDR_IND' , POT_RSNG_LDR_IND, 
'AAA_WCC_AMT', AAA_WCC_AMT,
'RSNG_LDR_LIVES_CNT', RSNG_LDR_LIVES_CNT                             
) AS SRC_VAL

FROM 

(
SELECT 
CYCLE_DT, 
CAST( CAST( SUM (AAA_WCC_AMT) AS DECIMAL(30,2) ) AS VARCHAR(100)) AAA_WCC_AMT,
CAST( CAST( SUM (RSNG_LDR_LIVES_CNT) AS DECIMAL(30,2) ) AS VARCHAR(100)) AS RSNG_LDR_LIVES_CNT,

CAST( COUNT(CASE WHEN POT_RSNG_LDR_IND='Y' THEN 1 ELSE NULL END ) AS VARCHAR(100) ) as POT_RSNG_LDR_IND

FROM 

(

SELECT AGT_PRTY_ID,AGT_BP_ID,SRC_SYS_ID,RUN_ID,UPDT_RUN_ID,TRANS_DT,
 SRC_DEL_IND,
 CURR_IND,
 AGCY_BPID,
 AGCY_NR,
 AGCY_PRTY_ID,
 UNIT_NR,
 UNIT_BP_ID,
 AS_OF_DT,
 CYCLE_DT,
 AGT_DUR_CLS_TYP,
 RSNG_LDR_STRT_YR_MO,
 RSNG_LDR_END_YR_MO,
 RSNG_LDR_CALC_STRT_YR_MO,
 SMBD_MGR_BP_ID,
 GA_BP_ID,
 AAA_WCC_AMT,
 RSNG_LDR_LIVES_CNT,
 ALR_ELR_LAPSE_PCT,
 RSNG_LDR_REQ_LVL_CD,
 POT_RSNG_LDR_IND,
 RSNG_LDR_QUAL_AAA_WCC_AMT,
 RSNG_LDR_QUAL_LIVES_CNT 
FROM PROD_STND_CRCOG_TBLS.RSNG_LDR  RL 
where RL.CYCLE_DT>=(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL)
and RSNG_LDR_FREQ_TYP<>'M' 

MINUS 

SELECT  AGT_PRTY_ID,
 AGT_BP_ID,
 SRC_SYS_ID,
 RUN_ID,
 UPDT_RUN_ID,
 TRANS_DT,
 SRC_DEL_IND,
 CURR_IND,
 AGCY_BPID,
 AGCY_NR,
 AGCY_PRTY_ID,
 UNIT_NR,
 UNIT_BP_ID,
 AS_OF_DT,
 CYCLE_DT,
 AGT_DUR_CLS_TYP,
 RSNG_LDR_STRT_YR_MO,
 RSNG_LDR_END_YR_MO,
 RSNG_LDR_CALC_STRT_YR_MO,
 SMBD_MGR_BP_ID,
 GA_BP_ID,
 AAA_WCC_AMT,
 RSNG_LDR_LIVES_CNT,
 ALR_ELR_LAPSE_PCT,
 RSNG_LDR_REQ_LVL_CD,
 POT_RSNG_LDR_IND,
 RSNG_LDR_QUAL_AAA_WCC_AMT,
 RSNG_LDR_QUAL_LIVES_CNT 
FROM  PROD_STND_CRCOG_TBLS.RSNG_LDR  RL 
where RSNG_LDR_FREQ_TYP='D'
 and RSNG_LDR_FREQ_TYP<>'M'  
 and  RL.CYCLE_DT>=(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL)
 and (AGT_BP_ID, AGCY_NR, UNIT_NR, AS_OF_DT) 
in (selECT distinct AGT_BP_ID, AGCY_NR, UNIT_NR, AS_OF_DT  FROM  PROD_STND_CRCOG_TBLS.RSNG_LDR  RL 
where RSNG_LDR_FREQ_TYP='R' and RL.CYCLE_DT>=(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL) )

) CORE 

where CORE.CYCLE_DT = (SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL ) 

GROUP BY 1  
) FACT 

CROSS JOIN 
(

SELECT 'POT_RSNG_LDR_IND' AS METRIC_NM
UNION 
SELECT 'AAA_WCC_AMT'
UNION 
SELECT 'RSNG_LDR_LIVES_CNT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'POT_RSNG_LDR_IND' , POT_RSNG_LDR_IND, 
'AAA_WCC_AMT', AAA_WCC_AMT,
'RSNG_LDR_LIVES_CNT', RSNG_LDR_LIVES_CNT
) IS NOT NULL 

) SRC 
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) AND SRC.CYCLE_DT=TGT.CYCLE_DT and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) 
WHERE (src.SRC_vAL-TGT.tgt_val) >.5
;


/*-----------------------------------------------------------------------------------*/


--Sprint 23 Objects


/*-----------------------------------------------------------------------------------*/

-- TEAM_ADVSR - Daily -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

select 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'TEAM_ADVSR' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Team Advisor' as Bus_Nm,
'Team Advisor Counts' AS RCRD_TYP_NM,
(select max(cal_dt) from prod_usig_crcog_dm.cal) as Cycle_dt,

'Team Advisor Counts' AS METRIC_NM , 

CAST( TRUNC(Fact.advsr_cnt,2) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(
select TRUNC(Sum(advsr_cnt),2) as advsr_cnt from (
select t.TEAM_BPID,count(distinct advsr_sid) as advsr_cnt from prod_usig_crcog_dm.TEAM_ADVSR ta
left join prod_usig_crcog_dm.TEAM t on t.TEAM_SID=ta.TEAM_SID
where team_advsr_strt_dt<>TEAM_ADVSR_STP_DT
group by 1 ) abc
) FACT 


) TGT 


JOIN 


(

SELECT 
'TEAM_ADVSR' as Tbl_Nm,
'Team Advisor Counts' AS METRIC_NM , 
CAST( TRUNC(Fact.advsr_cnt,2) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(
select TRUNC(sum(advsr_cnt),2) as advsr_cnt from (
SELECT parent_bpid,count(distinct chld_bpid) as advsr_cnt FROM PROD_USIG_STND_VW.SLLNG_AGMT_HIST_VW WHERE
trim(upper(PARENT_SLLNG_AGMT_RLE))='CP' and 
NOT (BUS_END_DT ='12/31/9999' AND  TRIM(UPPER(SLLNG_AGMT_STUS_DESC))='TERMINATED') AND
NOT (REL_END_DT ='12/31/9999'  AND  TRIM(UPPER(SLLNG_AGMT_STUS_DESC))='TERMINATED') AND
NOT (BUS_END_DT >REL_END_DT AND TRIM(UPPER(SLLNG_AGMT_STUS_DESC))='ACTIVE' )
and TRIM(UPPER(SLLNG_AGMT_STUS_RSN_DESC))<>'HOME OFFICE ERROR'
and rel_strt_dt<>rel_end_dt
group by 1 ) abc
) FACT 


) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- DTCH_OFC_ADVSR - Daily -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

select 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'DTCH_OFC_ADVSR' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Detached Office Advisor' as Bus_Nm,
'Detached Office Advisor Counts' AS RCRD_TYP_NM,
(select max(cal_dt) from prod_usig_crcog_dm.cal) as Cycle_dt,  

'Detached Office Advisor Counts' AS METRIC_NM , 

CAST( TRUNC(FACT.Advsr_cnt,2) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(
select TRUNC(sum(advsr_cnt),2)  as Advsr_cnt from (
select doa.DTCH_OFC_ID, adv.bp_id , count(distinct doa.ADVSR_SID) as Advsr_cnt from prod_usig_crcog_dm.DTCH_OFC_ADVSR doa
join prod_usig_crcog_dm.advsr adv on adv.advsr_sid=doa.advsr_sid
group by 1,2
) DM

) FACT 


) TGT 



JOIN 


(

SELECT 
'DTCH_OFC_ADVSR' as Tbl_Nm,
'Detached Office Advisor Counts' AS METRIC_NM , 

CAST( TRUNC(FACT.Advsr_cnt,2) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(

select TRUNC(sum(Advsr_cnt),2) as Advsr_cnt from (
select DTCHD_OFC_ID, ADVSR_BP_ID, count(distinct ADVSR_BP_ID) as Advsr_cnt from prod_stnd_prty.DTCHD_OFC
where cast(DTCHD_OFC_FR_DT as date)  <>cast( DTCHD_OFC_TO_DT as date)
group by 1,2
) EDW
) FACT 


) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM)  and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- Team - Daily --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT TGT.SCHEMA_NM AS SCHEMA_NM,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,
TGT.CYCLE_DT AS CYCLE_DT, CURRENT_TIMESTAMP as LST_MOD_TS
FROM

( 
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as SCHEMA_NM,
'TEAM' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Teaming' as Bus_Nm,
'Teaming ' AS RCRD_TYP_NM,
( select max(cal_dt) from prod_usig_crcog_dm.cal ) as CYCLE_DT,

DECODE(METRIC.METRIC_NM,  'ACTIVE_TEAM_COUNT' , 'Active Team Counts', 
 'INACTIVE_TEAM_COUNT' , 'Inactive Team Counts',
'TEAM_DESCRIPTION_COUNT', 'Team Description Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ACTIVE_TEAM_COUNT' , ACTIVE_TEAM_COUNT, 
'INACTIVE_TEAM_COUNT', INACTIVE_TEAM_COUNT,
  'TEAM_DESCRIPTION_COUNT', TEAM_DESCRIPTION_COUNT                       
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(
select 
sum(case when TEAM_ACTV_IND='Y'and TEAM_END_DT='9999-12-31'  THEN 1 ELSE 0 END) AS ACTIVE_TEAM_COUNT,
sum(case when TEAM_ACTV_IND='N'  THEN 1 ELSE 0 END) AS INACTIVE_TEAM_COUNT,
sum(case when TEAM_ACTV_IND='Y'and TEAM_END_DT='9999-12-31'  and TEAM_TYP_DESC is not null  THEN 1
when TEAM_ACTV_IND='N'and TEAM_TYP_DESC is not null  THEN 1 
ELSE 0 END) as TEAM_DESCRIPTION_COUNT

from  prod_usig_crcog_dm.TEAM 
) FACT 

CROSS JOIN 
(
SELECT 'ACTIVE_TEAM_COUNT' AS METRIC_NM
UNION 
SELECT 'INACTIVE_TEAM_COUNT'
UNION 
SELECT 'TEAM_DESCRIPTION_COUNT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ACTIVE_TEAM_COUNT' , ACTIVE_TEAM_COUNT, 
'INACTIVE_TEAM_COUNT', INACTIVE_TEAM_COUNT,
  'TEAM_DESCRIPTION_COUNT',TEAM_DESCRIPTION_COUNT                       
) IS NOT NULL 


)TGT


JOIN 

(

 SELECT 
'TEAM' as TBL_NM,

DECODE(METRIC.METRIC_NM,  'ACTIVE_TEAM_COUNT' , 'Active Team Counts', 
 'INACTIVE_TEAM_COUNT' , 'Inactive Team Counts',
'TEAM_DESCRIPTION_COUNT', 'Team Description Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ACTIVE_TEAM_COUNT' , ACTIVE_TEAM_COUNT, 
'INACTIVE_TEAM_COUNT', INACTIVE_TEAM_COUNT,
  'TEAM_DESCRIPTION_COUNT',TEAM_DESCRIPTION_COUNT                       
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(

select 
sum(case when TEAM_ACTV_IND='Y'and  TEAM_END_DT= cast('9999-12-31'  AS DATE) THEN 1 ELSE 0 END) AS ACTIVE_TEAM_COUNT,
sum(case when TEAM_ACTV_IND='N'  THEN 1 ELSE 0 END) AS INACTIVE_TEAM_COUNT,

sum(case when TEAM_ACTV_IND='Y'and TEAM_END_DT= cast('9999-12-31'  AS DATE) and TEAM_TYPE_DESC is not null  THEN 1
when TEAM_ACTV_IND='N'and TEAM_TYPE_DESC is not null  THEN 1 
ELSE 0 END) as TEAM_DESCRIPTION_COUNT

from (

select DISTINCT
CP_PARENT.CP_BPID AS TEAM_BPID
,CP_PARENT.CP_NM AS TEAM_NAME
,CP_PARENT.TEAM_TYPE_DESC AS TEAM_TYPE_DESC
,CP_PARENT.CP_CO_REL_STRT_DT AS TEAM_STRT_DT
,CP_PARENT.CP_CO_REL_STP_DT AS TEAM_END_DT
,CAST(CP_PARENT.CP_CO_REL_STRT_DT AS DATE) AS TEAM_OPN_DT
,CAST(CP_PARENT.TEAM_CLOS_DT AS DATE)  AS TEAM_CLOS_DT
,CASE WHEN CAST(TEAM_CLOS_DT AS DATE)  ='9999-12-31' THEN 'Y' ELSE 'N' END AS  TEAM_ACTV_IND


FROM 
(
select 
SLLNG.CHLD_BPID AS CP_BPID
,SLLNG.CHLD_SLLNG_AGMT_RLE AS CP_RLE
,SLLNG.CHLD_PRTY_ID 
,PDV.FULL_NM AS CP_NM
,SLLNG.PARENT_BPID AS CO_BPID
,SLLNG.PARENT_SLLNG_AGMT_RLE AS CO_RLE
,SLLNG.PARENT_PRTY_ID
,SLLNG.BUS_STRT_DT AS CP_CO_REL_STRT_DT
,SLLNG.BUS_END_DT AS CP_CO_REL_STP_DT
,SLLNG.BUS_END_DT AS TEAM_CLOS_DT
,SLLNG.STD_CONTR_TYP_DESC AS TEAM_TYPE_DESC
FROM
(select * FROM PROD_USIG_STND_VW .SLLNG_AGMT_HIST_VW WHERE
(CHLD_BPID,BUS_STRT_DT) IN 
(SELECT CHLD_BPID, MAX(CAST(BUS_STRT_DT AS DATE)) FROM PROD_USIG_STND_VW .SLLNG_AGMT_HIST_VW
WHERE NOT (BUS_END_DT='12/31/9999' AND  SLLNG_AGMT_STUS_DESC='Terminated') AND       
NOT (REL_END_DT='12/31/9999' AND  SLLNG_AGMT_STUS_DESC='Terminated') AND       
NOT (BUS_END_DT >REL_END_DT  AND SLLNG_AGMT_STUS_DESC='Active' )
AND CHLD_SLLNG_AGMT_RLE='CP' AND TRIM(SLLNG_AGMT_STUS_RSN_DESC)<>'Home Office Error'
 GROUP BY 1 ) 
AND NOT (BUS_END_DT='12/31/9999' AND  SLLNG_AGMT_STUS_DESC='Terminated') 
AND NOT (REL_END_DT='12/31/9999' AND  SLLNG_AGMT_STUS_DESC='Terminated') 
AND NOT (BUS_END_DT >REL_END_DT  AND SLLNG_AGMT_STUS_DESC='Active' )
) SLLNG

FULL OUTER JOIN
(select TRIM(BUSINESS_PARTNER_ID) AS BUSINESS_PARTNER_ID,TRIM(FULL_NM) AS FULL_NM FROM  PROD_USIG_STND_VW.PDCR_DEMOGRAPHICS_VW 
)PDV 
ON PDV.BUSINESS_PARTNER_ID=SLLNG.CHLD_BPID
WHERE SLLNG.CHLD_SLLNG_AGMT_RLE='CP'
AND trim(SLLNG_AGMT_STUS_RSN_DESC)<>'Home Office Error'
) CP_PARENT

) a
) 

 FACT 

CROSS JOIN 
(
SELECT 'ACTIVE_TEAM_COUNT' AS METRIC_NM
UNION 
SELECT 'INACTIVE_TEAM_COUNT'
UNION 
SELECT 'TEAM_DESCRIPTION_COUNT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ACTIVE_TEAM_COUNT' , ACTIVE_TEAM_COUNT, 
'INACTIVE_TEAM_COUNT', INACTIVE_TEAM_COUNT,
  'TEAM_DESCRIPTION_COUNT',TEAM_DESCRIPTION_COUNT                       
) IS NOT NULL 


) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM)  and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ; 


/*-----------------------------------------------------------------------------------*/

-- UNIT -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


select 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'UNT' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Unit' as Bus_Nm,
'Unit Counts' AS RCRD_TYP_NM,
CURRENT_DATE as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_CHK','Unit Manager Check',
'CNT_UNIT_NR','Unit Number Counts',
'OVERLAP_DATES','Overlap Date Counts',
'CNT_UNT_ACTV_IND','Unit Active Indicator Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_CHK',Unit_mgr_chk,
'CNT_UNIT_NR',CNT_UNIT_NR,
'OVERLAP_DATES',OVERLAP_DATES,
'CNT_UNT_ACTV_IND',CNT_UNT_ACTV_IND

) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

select  
CAST(Unit_mgr_chk as VARCHAR(20)) as Unit_mgr_chk,
CAST(CNT_UNIT_NR as VARCHAR(20)) as CNT_UNIT_NR ,  
CAST(OVERLAP_DATES as VARCHAR(20)) as  OVERLAP_DATES,
CAST(CNT_UNT_ACTV_IND as VARCHAR(20)) AS CNT_UNT_ACTV_IND 
FROM 

(
select 
sum( case when ( UNIT_MGR_TTL = 'SM' and (UNIT_MGR_BPID = '' or UNIT_MGR_BPID is null) ) then 1 else 0 end) as Unit_mgr_chk
from prod_stnd_crcog_tbls.UNIT
) DM1

cross join 
(
select count( distinct UNIT_NR) as CNT_UNIT_NR from prod_usig_crcog_dm.UNT 
where TRIM(UPPER(UNT_TYP)) not in ('UNASSIGNED BROKER','UNIT MISALLOCATION IN FIRM','UNASSIGNED CAREER', 'UNKWN' ) 
) DM2

CROSS JOIN 

(
SELECT count(*) as OVERLAP_DATES
FROM ( 
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT, PREV_END_DT, NEXT_ST_DT,  ADVSR_HIST_STRT_DT - PREV_END_DT AS DIF1,
NEXT_ST_DT - ADVSR_HIST_END_DT AS DIF2

FROM
(
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT,
MIN(ADVSR_HIST_END_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREV_END_DT,
MAX(ADVSR_HIST_STRT_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ST_DT

FROM
( 
SELECT
ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT
FROM PROD_USIG_CRCOG_DM.ADVSR_HIST
WHERE ADVSR_HIST_STRT_DT<ADVSR_HIST_END_DT
) A

) B
) C WHERE DIF1<1 OR DIF2<1

) DM3

CROSS JOIN 
( select count(distinct unit_nbr) AS CNT_UNT_ACTV_IND from prod_stnd_crcog_tbls.UNIT where TRIM(UNIT_ACTV_IND)='I' ) DM4


) FACT 

CROSS JOIN 
(
SELECT 'UNIT_MGR_CHK' AS METRIC_NM
UNION 
select 'CNT_UNIT_NR'
UNION 
SELECT 'OVERLAP_DATES'
UNION 
SELECT 'CNT_UNT_ACTV_IND'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_CHK' ,  Unit_mgr_chk,
'CNT_UNIT_NR',CNT_UNIT_NR,
'OVERLAP_DATES',OVERLAP_DATES,
'CNT_UNT_ACTV_IND',CNT_UNT_ACTV_IND
) IS NOT NULL


) TGT 


JOIN 


(

SELECT 
'UNT' as Tbl_Nm,

DECODE(METRIC.METRIC_NM, 
'Unit_MGR_CHK','Unit Manager Check',
'CNT_UNIT_NR','Unit Number Counts',
'OVERLAP_DATES','Overlap Date Counts',
'CNT_UNT_ACTV_IND','Unit Active Indicator Counts'
) AS METRIC_NM , 

CAST( 
DECODE( METRIC.METRIC_NM, 
'UNIT_MGR_CHK',Unit_mgr_chk,
'CNT_UNIT_NR',CNT_UNIT_NR,
'OVERLAP_DATES',OVERLAP_DATES,
'CNT_UNT_ACTV_IND',CNT_UNT_ACTV_IND ) 
AS VARCHAR(100) ) AS SRC_VAL


FROM 

( 
select
CAST(Unit_mgr_chk as VARCHAR(20)) as Unit_mgr_chk, 
CAST(CNT_UNIT_NR as VARCHAR(20)) as CNT_UNIT_NR , 'NA' as OVERLAP_DATES,
CAST(CNT_UNT_ACTV_IND as VARCHAR(20)) as CNT_UNT_ACTV_IND
FROM

( select 
sum( case when ( UNIT_MGR_TTL = 'SM' and (UNIT_MGR_BPID = '' or UNIT_MGR_BPID is null) ) then 1 else 0 end) as Unit_mgr_chk
from prod_stnd_crcog_tbls.UNIT
) EDW1

CROSS JOIN 
( select  count(DISTINCT UNIT_NBR) as CNT_UNIT_NR from prod_stnd_crcog_tbls.UNIT  
WHERE trim(upper(unit_typ))   IN ('AGENCY UNIT' , 'BROKERAGE UNIT' ,'BROKERAGE HOUSE ACCOUNT' , 'CAREER UNIT')
) EDW2

CROSS JOIN 
( select count(distinct unit_nbr) as CNT_UNT_ACTV_IND from prod_stnd_crcog_tbls.UNIT where TRIM(UNIT_ACTV_IND)='I') EDW3

) FACT 

CROSS JOIN 
(
SELECT 'UNIT_MGR_CHK' AS METRIC_NM
UNION 
select 'CNT_UNIT_NR'
UNION 
SELECT 'OVERLAP_DATES'
UNION 
SELECT 'CNT_UNT_ACTV_IND'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_CHK', Unit_mgr_chk,
'CNT_UNIT_NR', CNT_UNIT_NR,
'OVERLAP_DATES', OVERLAP_DATES,
'CNT_UNT_ACTV_IND', CNT_UNT_ACTV_IND
) IS NOT NULL 
 
) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- AGMT -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS
(Schema_Nm, TBL_NM, TBL_TYP_NM, BUS_NM, SRC_VAL, TGT_VAL, RCRD_TYP_NM, METRIC_NM, CYCLE_DT, LST_MOD_TS)

select 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM
(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'AGMT' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Agreement' as Bus_Nm,
'Policy Counts' AS RCRD_TYP_NM,
( SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,  


DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_DM','NON MMLIS Policy Counts',
'COUNTS_MMLIS_DM', 'MMLIS Policy Counts'

) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_DM',COUNTS_NON_MMLIS_DM,
'COUNTS_MMLIS_DM',COUNTS_MMLIS_DM
) AS VARCHAR(100) ) 
 AS TGT_VAL

FROM 


(

SELECT  COUNTS_NON_MMLIS_DM, COUNTS_MMLIS_DM FROM 
(

select COUNT(*) as COUNTS_NON_MMLIS_DM from  (
select distinct TRIM(AGMT.CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(AGMT.HLDG_KEY) as HLDG_KEY  
from prod_usig_crcog_dm.agmt 
where CARR_ADMIN_SYS_CD <> 'UNIV'
and agmt_sid <> -1
and agmt_sid in ( select distinct agmt_sid from prod_usig_crcog_dm.comm_fact 
UNION select distinct agmt_sid from prod_usig_crcog_dm.premium_fact 
UNION select distinct agmt_sid from prod_usig_crcog_dm.RCOG_DI_BONUS_FACT )  
) DM

)DM
 

CROSS JOIN 
(
select count(*) as COUNTS_MMLIS_DM from (
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY, 
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX  
from prod_usig_crcog_dm.agmt 
where trim(upper(CARR_ADMIN_SYS_CD)) = 'UNIV' 
and agmt_sid in (select agmt_sid from prod_usig_crcog_dm.mmlis_fact)
) DM_MMLIS

) DM2  
) FACT 

CROSS JOIN 
(
SELECT 'COUNTS_NON_MMLIS_DM'  AS METRIC_NM
UNION 
SELECT 'COUNTS_MMLIS_DM'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_DM',COUNTS_NON_MMLIS_DM,
'COUNTS_MMLIS_DM',COUNTS_MMLIS_DM
) IS NOT NULL 

) TGT


JOIN 

(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'AGMT' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Agreement' as Bus_Nm,
'Policy Counts' AS RCRD_TYP_NM,
( SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,  


DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_EDW','NON MMLIS Policy Counts',
'COUNTS_MMLIS_EDW','MMLIS Policy Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_EDW',COUNTS_NON_MMLIS_EDW,
'COUNTS_MMLIS_EDW',COUNTS_MMLIS_EDW
) AS VARCHAR(100) ) 
 AS SRC_VAL

FROM 

(

SELECT  COUNTS_NON_MMLIS_EDW, COUNTS_MMLIS_EDW FROM (
select count(*) as COUNTS_NON_MMLIS_EDW from (
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY from 
(
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY  
FROM PROD_STND_CRCOG_TBLS.RCOG_DI_BONUS where  Ltrim(rtrim(SRC_TRANS_TYP))<> '265' and year(BULLETIN_DT) >= 2018

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY    
FROM PROD_STND_CRCOG_TBLS.MMLIA_AGMT_PREM  WHERE SRC_SYS_ID NOT IN (162, 163) 
and admin_transaction_dt >= '2015-12-16'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY  
FROM PROD_STND_CRCOG_TBLS.MSI_AGMT_PREM  where admin_transaction_dt >= '2019-01-01'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY  
FROM PROD_STND_TBLS.POL_RCOG_CR  where cast(trans_dt as date)  >= '2016-01-01'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , TRIM(HLDG_KEY) as HLDG_KEY    
FROM PROD_STND_TBLS.AGMT_COMM_TXN WHERE SRC_SYS_ID NOT IN (162, 163,57)  and COMP_PLAN_CD NOT IN( 'TRN2P', 'VAEVP' )
and trim(carr_admin_sys_cd) <> 'UNIV'
and cycle_dt >= '2015-12-16' 

) A
) edw 

 ) EDW

CROSS JOIN 
(select count(*) as COUNTS_MMLIS_EDW from (
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY, 
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX
FROM prod_stnd_tbls.MMLISI_DAILY_AGMT_CM_TX_DLTA where src_sys_id in (162, 163) 
and PAY_SYS_CYCLE_DT >= '2018-07-04'
) EDW  


) MMLIS

) FACT 

CROSS JOIN 
(
SELECT 'COUNTS_NON_MMLIS_EDW'  AS METRIC_NM
UNION 
SELECT 'COUNTS_MMLIS_EDW'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'COUNTS_NON_MMLIS_EDW',COUNTS_NON_MMLIS_EDW,
'COUNTS_MMLIS_EDW',COUNTS_MMLIS_EDW
) IS NOT NULL 


)SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) AND SRC.CYCLE_DT=TGT.CYCLE_DT and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- AGCY_AFFLTN -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'AGCY_AFFLTN' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Agency Affiliation' as bus_nm,
'Agency Affiliation' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'PRIOR_AGCY_NR_CHECK' , 'Prior Agency Number Null records', 
'AGCY_NM_CHECK', 'Agency Name Null Records',
'FLD_MGMT_TERR_NM_CHECK', 'Field Management Teritory Name Null Records'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'PRIOR_AGCY_NR_CHECK' , PRIOR_AGCY_NR_CHECK, 
'AGCY_NM_CHECK', AGCY_NM_CHECK,
'FLD_MGMT_TERR_NM_CHECK', FLD_MGMT_TERR_NM_CHECK                             
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

select 
sum(case when (PRIOR_AGCY_NR is null or TRIM(PRIOR_AGCY_NR)='') then 1 else 0 end) as PRIOR_AGCY_NR_CHECK, 
sum(case when (AGCY_NM is null or TRIM(AGCY_NM)='') then 1 else 0 end ) as AGCY_NM_CHECK,
sum(case when ( FLD_MGMT_TERR_NM is null or TRIM(FLD_MGMT_TERR_NM)='') then 1 else 0 end ) as FLD_MGMT_TERR_NM_CHECK
from  prod_usig_crcog_dm.AGCY_AFFLTN

  
) FACT 

CROSS JOIN 
(

SELECT 'PRIOR_AGCY_NR_CHECK' AS METRIC_NM
UNION 
SELECT 'AGCY_NM_CHECK'
UNION 
SELECT 'FLD_MGMT_TERR_NM_CHECK'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'PRIOR_AGCY_NR_CHECK' , PRIOR_AGCY_NR_CHECK, 
'AGCY_NM_CHECK', AGCY_NM_CHECK,
'FLD_MGMT_TERR_NM_CHECK', FLD_MGMT_TERR_NM_CHECK                             
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'AGCY_AFFLTN' as TBL_NM,

DECODE(METRIC.METRIC_NM, 'PRIOR_AGCY_NR_CHECK' , 'Prior Agency Number Null records', 
'AGCY_NM_CHECK', 'Agency Name Null Records',
'FLD_MGMT_TERR_NM_CHECK', 'Field Management Teritory Name Null Records'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'PRIOR_AGCY_NR_CHECK' , PRIOR_AGCY_NR_CHECK, 
'AGCY_NM_CHECK', AGCY_NM_CHECK,
'FLD_MGMT_TERR_NM_CHECK', FLD_MGMT_TERR_NM_CHECK                             
) AS VARCHAR(100) ) AS SRC_VAL
FROM 

(

select * from (select 'NA' as PRIOR_AGCY_NR_CHECK,'NA' as AGCY_NM_CHECK,'NA' as FLD_MGMT_TERR_NM_CHECK)A
) FACT 

CROSS JOIN 
(

SELECT 'PRIOR_AGCY_NR_CHECK' AS METRIC_NM
UNION 
SELECT 'AGCY_NM_CHECK'
UNION 
SELECT 'FLD_MGMT_TERR_NM_CHECK'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'PRIOR_AGCY_NR_CHECK' , PRIOR_AGCY_NR_CHECK, 
'AGCY_NM_CHECK', AGCY_NM_CHECK,
'FLD_MGMT_TERR_NM_CHECK', FLD_MGMT_TERR_NM_CHECK                             
) IS NOT NULL 


) SRC 
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- ADVSR_STUS -- 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'ADVSR_STUS' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Advisor Status' as bus_nm,
'Advisor Status' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'ADVSR_CHK','Advisor Check',
'ADVSR_COUNT' , 'Advisor Count', 
'ACTV_NFF_IND_CNT', 'Active NFF Indicator Count'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 'ADVSR_CHK',ADVSR_CHK,
'ADVSR_COUNT' , ADVSR_COUNT, 
'ACTV_NFF_IND_CNT', ACTV_NFF_IND_CNT                    
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

select 
( SELECT COUNT(*) FROM 
( select distinct advsr_sid from prod_usig_crcog_dm.advsr where ADVSR_SID<> 271103147 minus select distinct advsr_sid from prod_usig_crcog_dm.advsr_stus ) A 

) as ADVSR_CHK, 
DM.Advsr_CNT as ADVSR_COUNT,
DM.ACTV_NFF_IND_CNT as ACTV_NFF_IND_CNT
from ( 
select 
count(distinct advsr_sid) as Advsr_CNT,  
SUM(case when ACTV_NFF_IND = 'Y' then 1 ELSE 0 END) AS ACTV_NFF_IND_CNT  
from prod_usig_crcog_dm.advsr_stus 
) DM

) FACT

CROSS JOIN 
(
SELECT 'ADVSR_CHK' AS METRIC_NM
UNION 
SELECT 'ADVSR_COUNT'
UNION 
SELECT 'ACTV_NFF_IND_CNT'
) METRIC

WHERE 

DECODE(METRIC.METRIC_NM, 'ADVSR_CHK', ADVSR_CHK,
'ADVSR_COUNT' , ADVSR_COUNT, 
'ACTV_NFF_IND_CNT', ACTV_NFF_IND_CNT                    
)IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'ADVSR_STUS' as TBL_NM,

DECODE(METRIC.METRIC_NM, 'ADVSR_CHK','Advisor Check',
'ADVSR_COUNT' , 'Advisor Count', 
'ACTV_NFF_IND_CNT', 'Active NFF Indicator Count'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 'ADVSR_CHK',ADVSR_CHK,
'ADVSR_COUNT' , ADVSR_COUNT, 
'ACTV_NFF_IND_CNT', ACTV_NFF_IND_CNT                    
) AS VARCHAR(100) ) AS  SRC_VAL
FROM 

(


 select 'NA'as ADVSR_CHK, cast(count(ADVSR_SID) as varchar(100)) as ADVSR_COUNT,CAST( SUM(NFF_COUNT) as varchar(100))  as ACTV_NFF_IND_CNT from (select ADVSR_SID,case when ACTV_NFF_IND='Y' then 1 else 0 end as NFF_COUNT  from (SELECT		distinct a.ADVSR_SID, 	a.BP_ID, 	Case 		
			When c.ACTV_IND > 0 Then 'Y' 		
			Else 'N' 	
		End as ACTV_CNTR_IND,
			Case 		
			When c.ACTV_CAREER_IND > 0 Then 'Y' 		
			Else 'N' 	
		End as ACTV_CAREER_CNTR_IND,
			CASE 		
			WHEN TRIM(N.NFF_ACTV_DESC) = 'TERM' THEN 'N' 		
			ELSE CASE 			
			WHEN N.NFF_FT_END_DT > CURRENT_DATE THEN 'Y' 			
			ELSE 'N' 		
		END 	
		END AS ACTV_NFF_IND,
			Case 		
			When n.NFF_FT_STRT_DT Is Null 		
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 		
			Else n.NFF_FT_STRT_DT 	
		End as NFF_FT_STRT_DT,
			n.NFF_FT_END_DT,
			n.NFF_CO_TERM_DT,
			Extract( 		Year 	From 		CURRENT_DATE 	)- Extract( 		Year 	From 		Case 			
			When n.NFF_FT_STRT_DT Is Null 			
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 			
			Else n.NFF_FT_STRT_DT 		
		End 	)+ 1 as YRS_OF_SVC_LIMRA,
			Cast( FLOOR( 		( 			Cast( 				TO_CHAR( 					CURRENT_DATE,
							'YYYYMMDD' 				) as Int 			)- Cast( 				TO_CHAR( 					Case 						
			When n.NFF_FT_STRT_DT Is Null 						
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 						
			Else n.NFF_FT_STRT_DT 					
		End, 					'YYYYMMDD' 				) as Int 			) 		)/ 10000.00000 )as INT 	)+ 1 as YRS_OF_SVC_STD,
			Case 		
			When Case 			
			When n.NFF_FT_STRT_DT Is Null 			
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 			
			Else n.NFF_FT_STRT_DT 		
		End is Null Then '0' 		
			When Cast( FLOOR( 			( 				Cast( 					TO_CHAR( 						CURRENT_DATE,
								'YYYYMMDD' 					) as Int 				)- Cast( 					TO_CHAR( 						Case 							
			When n.NFF_FT_STRT_DT Is Null 							
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 							
			Else n.NFF_FT_STRT_DT 						
		End, 						'YYYYMMDD' 					) as Int 				) 			)/ 10000.00000 )as INT 		)+ 1 >= 5 Then '5+' 		
			Else Cast( 			Cast( FLOOR( 				( 					Cast( 						TO_CHAR( 							CURRENT_DATE,
									'YYYYMMDD' 						) as Int 					)- Cast( 						TO_CHAR( 							Case 								
			When n.NFF_FT_STRT_DT Is Null 								
	and a.ORIG_FULL_TM_STRT_DT <> '0001-01-01' Then a.ORIG_FULL_TM_STRT_DT 								
			Else n.NFF_FT_STRT_DT 							
		End, 							'YYYYMMDD' 						) as Int 					) 				)/ 10000.00000 )as INT 			)+ 1 as Varchar(1) 		) 	
		End as LEN_OF_SVC 
From		PROD_USIG_CRCOG_DM.ADVSR a Left Outer Join( 		
Select			 			LPAD(TRIM(TRIM(LEADING '0' 
FROM	ac.PDCR_BPID)),10,
		'0') as PDCR_BPID,
					Sum( Case 
			When ac.DST_BUS_END_DT > Current_Date Then 1 
			Else 0 
		End ) as ACTV_IND,
					Sum( Case 
			When ac.DST_BUS_END_DT > Current_Date 
	And c1.CBO_DESC = 'CAREER' Then 1 
			Else 0 
		End ) as ACTV_CAREER_IND 		
From				PROD_STND_CRCOG_TBLS.ADVSR_CNTR ac 		Inner Join PROD_USIG_CRCOG_DM.CNTR c1 
	on 			 TRIM(ac.L0_STD_CONTR_TYP_CD) = TRIM(c1.CNTR_CDE) 			 		
Group By 			TRIM(TRIM(LEADING '0' 
FROM	ac.PDCR_BPID)) 	) c 
	on 	TRIM(TRIM(LEADING '0' 
FROM	a.BP_ID)) = TRIM(TRIM(LEADING '0' 
FROM	c.PDCR_BPID)) Left Outer Join( 		
SELECT				DISTINCT NFF_AGT_CDE,
					MAX( NFF_FT_STRT_DT ) OVER( 				
PARTITION BY NFF_AGT_CDE,
						NFF_EFF_ACTV_DT 			
ORDER BY 				NFF_EFF_ACTV_DT 			) AS NFF_FT_STRT_DT,
					MIN( NFF_FT_END_DT ) over( 				
partition by NFF_AGT_CDE,
						NFF_EFF_ACTV_DT 			
order by 				NFF_EFF_ACTV_DT 			) as NFF_FT_END_DT,
					MIN( NFF_CO_TERM_DT ) over( 				
partition by NFF_AGT_CDE,
						NFF_EFF_ACTV_DT 			
order by 				NFF_EFF_ACTV_DT 			) as NFF_CO_TERM_DT,
					NFF_ACTV_DESC,
					chg_typ 		
FROM				PROD_STND_PRTY.NFF_ACTV 		
WHERE				( 				NFF_EFF_ACTV_DT,
						TRIM(TRIM(Leading '0' 
FROM	NFF_AGT_CDE)) 			) in( 				
select						max( NFF_EFF_ACTV_DT ),
							TRIM(TRIM(LEADING '0' 
FROM	NFF_AGT_CDE)) as NFF_AGT_CDE 				
from						 PROD_STND_PRTY.NFF_ACTV 				
where						trim( chg_typ )<> 'D' 				
group by 					TRIM(TRIM(LEADING '0' 
FROM	NFF_AGT_CDE)) 			) 	) n 
	on 	TRIM(TRIM(LEADING '0' 
FROM	a.BP_ID)) = TRIM(TRIM(LEADING '0' 
FROM	n.NFF_AGT_CDE))) a)final
) FACT 

CROSS JOIN 
(

SELECT 'ADVSR_CHK' AS METRIC_NM
UNION 
SELECT 'ADVSR_COUNT'
UNION 
SELECT 'ACTV_NFF_IND_CNT'

) METRIC

WHERE 

DECODE(METRIC.METRIC_NM, 'ADVSR_CHK',ADVSR_CHK,
'ADVSR_COUNT' , ADVSR_COUNT, 
'ACTV_NFF_IND_CNT', ACTV_NFF_IND_CNT                    
)IS NOT NULL 
 

) SRC 
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;

/*-----------------------------------------------------------------------------------*/

-- CNTR -- 
 
INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS  
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

SELECT  
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 'NA' AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'CNTR' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Contract Types' as Bus_Nm,
'Contract Types' AS RCRD_TYP_NM,

DECODE(METRIC.METRIC_NM, 
'CHECK_DUPLICATES','Duplicate Records Check',
'CHECK_CBO_DESC', 'CBO Description Null Check'
) AS METRIC_NM , 

CURRENT_DATE-1 as CYCLE_DT,

CAST( 
DECODE(METRIC.METRIC_NM, 
'CHECK_DUPLICATES',CHECK_DUPLICATES,
'CHECK_CBO_DESC',CHECK_CBO_DESC ) 
AS VARCHAR(100) ) 
 AS TGT_VAL

FROM 

(
SELECT CHECK_DUPLICATES, CHECK_CBO_DESC FROM (
SELECT CASE WHEN COUNT(*)=0 THEN 'No Duplicates Found' ELSE 'Duplicates Found' END as CHECK_DUPLICATES
FROM (

SELECT CNTR_CDE,CNTR_DESC,CNTR_SRC,CBO_DESC,count(*) as COUNT_DUP FROM PROD_USIG_CRCOG_DM.CNTR
group by 1,2,3,4
having count(*)>1
) DUPL )DUPL_2

CROSS JOIN 
(
SELECT CASE WHEN COUNT(*)=0 THEN 'No Nulls Found in CBO_DESC' ELSE 'Nulls Found in CBO_DESC' END as CHECK_CBO_DESC
FROM (
SELECT * FROM PROD_USIG_CRCOG_DM.CNTR
where CBO_DESC is NULL or TRIM(CBO_DESC)=''
) SUBQ_2 ) CBO_DESC


) FACT 

CROSS JOIN 
(
SELECT 'CHECK_DUPLICATES'  AS METRIC_NM
UNION 
SELECT 'CHECK_CBO_DESC'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'CHECK_DUPLICATES',CHECK_DUPLICATES,
'CHECK_CBO_DESC',CHECK_CBO_DESC
) IS NOT NULL 

) TGT;


/*-----------------------------------------------------------------------------------*/

-- AGMT_DTL --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS
(SCHEMA_NM, TBL_NM, TBL_TYP_NM, BUS_NM, RCRD_TYP_NM, METRIC_NM, CYCLE_DT, LST_MOD_TS, TGT_VAL, SRC_VAL)


select SCHEMA_NM, TBL_NM, TBL_TYP_NM, BUS_NM, RCRD_TYP_NM, METRIC_NM, CYCLE_DT, LST_MOD_TS, TGT_VAL, SRC_VAL 

FROM
(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'AGMT_DTL' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Agreement Detail' as Bus_Nm,
'Policy Counts' AS RCRD_TYP_NM,
'Agreement Detail Policy Counts' AS METRIC_NM,
( SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,  
CURRENT_TIMESTAMP AS LST_MOD_TS, 

( SELECT COUNT(*) FROM ( 
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(UPPER(HLDG_KEY)), '')  as HLDG_KEY ,
COALESCE(TRIM(UPPER(HLDG_KEY_PFX)), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(UPPER(HLDG_KEY_SFX)), '')  as HLDG_KEY_SFX
FROM prod_usig_crcog_dm.AGMT_DTL  
WHERE AGMT_DTL_SID  in ( select distinct agmt_dtl_sid from prod_usig_crcog_dm.comm_fact 
UNION select distinct agmt_dtl_sid from prod_usig_crcog_dm.premium_fact 
UNION select distinct agmt_dtl_sid from prod_usig_crcog_dm.MMLIS_FACT
where not (WTD_COMM_CRDTS = 0 and INVSTD_AMT = 0 and PAYOUT_AMT =0 and  GDC_AMT  = 0  ) )   
AND NOT ( CARR_ADMIN_SYS_CD = 'UNIV' AND TRIM(HLDG_KEY) = '00000000000000000000' ) 
) DM ) AS TGT_VAL ,
 

( select count(*) from 
(
select distinct TRIM(UPPER(CARR_ADMIN_SYS_CD)) , TRIM(UPPER(HLDG_KEY)) AS HLDG_KEY , TRIM(UPPER(HLDG_KEY_PFX)) AS HLDG_KEY_PFX,
TRIM(UPPER(HLDG_KEY_SFX)) AS HLDG_KEY_SFX FROM 
(

select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY ,
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX    
FROM PROD_STND_CRCOG_TBLS.MMLIA_AGMT_PREM  WHERE SRC_SYS_ID NOT IN (162, 163)  
and admin_transaction_dt >= '2015-12-16'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY ,
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX
FROM PROD_STND_CRCOG_TBLS.MSI_AGMT_PREM  where  
admin_transaction_dt >= '2019-01-01'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY ,
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX  
FROM PROD_STND_TBLS.POL_RCOG_CR  where CAST(trans_dt AS DATE) >= '2016-01-01'

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY ,
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX
FROM PROD_STND_TBLS.AGMT_COMM_TXN WHERE  
SRC_SYS_ID NOT IN (162, 163,57)  and COMP_PLAN_CD NOT IN( 'TRN2P', 'VAEVP' )
and trim(carr_admin_sys_cd) <> 'UNIV'
and cycle_dt >= '2015-12-16' 

UNION
select distinct TRIM(CARR_ADMIN_SYS_CD) as CARR_ADMIN_SYS_CD , COALESCE(TRIM(HLDG_KEY), '')  as HLDG_KEY ,
COALESCE(TRIM(HLDG_KEY_PFX), '')  as HLDG_KEY_PFX,  COALESCE(TRIM(HLDG_KEY_SFX), '')  as HLDG_KEY_SFX  
FROM PROD_STND_TBLS.MMLISI_DAILY_AGMT_CM_TX_DLTA   where PAY_SYS_CYCLE_DT >= '2018-07-04'
and not (WCC_AMT = 0 and INVSTD_AMT = 0 and MNO_PAYABLE_AMT =0 and  GDC_TOTAL = 0)

) A

) EDW  ) AS SRC_VAL 

) Agmt_Dtl ;

/*-----------------------------------------------------------------------------------*/

---Sprint 24 Objects 

-- ADVSR_AGCY_CNTR

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'ADVSR_AGCY_CNTR' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Advisor Agency Contract' as bus_nm,
'Advisor Agency Contract' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'CNT_NO_AGCY_AFFLTN_ID' , 'Advisor without AGCY_AFFLTN_ID Counts'
,'CNT_NO_CBO_DESC', 'Advisor without CBO_DESC Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'CNT_NO_AGCY_AFFLTN_ID' , CNT_NO_AGCY_AFFLTN_ID
,'CNT_NO_CBO_DESC', CNT_NO_CBO_DESC 
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

select 
sum(case when agcy_affltn_id = -1 then 1 else 0 end ) as CNT_NO_AGCY_AFFLTN_ID, 
sum(case when trim(upper(CBO_DESC)) not in ('OTHER' , 'BROKER' , 'CAREER') then 1 else 0 end ) as CNT_NO_CBO_DESC 
from 
( select distinct ADVSR_AGCY_CNTR_SID, ADVSR_SID, AGCY_AFFLTN_ID, CBO_DESC
from prod_usig_crcog_dm.ADVSR_AGCY_CNTR aac 
where ADVSR_AGCY_CNTR_SID <> -1 
and trim(cntr_desc) not in ('CML Career', 'Line of Business Con','Single Case Agree. /')
) DM


) FACT 

CROSS JOIN 
(

SELECT 'CNT_NO_AGCY_AFFLTN_ID' AS METRIC_NM
UNION 
SELECT 'CNT_NO_CBO_DESC'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'CNT_NO_AGCY_AFFLTN_ID' , CNT_NO_AGCY_AFFLTN_ID
,'CNT_NO_CBO_DESC', CNT_NO_CBO_DESC                       
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'ADVSR_AGCY_CNTR' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Advisor Agency Contract' as bus_nm,
'Advisor Agency Contract' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt,

DECODE(METRIC.METRIC_NM, 'CNT_NO_AGCY_AFFLTN_ID' , 'Advisor without AGCY_AFFLTN_ID Counts'
,'CNT_NO_CBO_DESC', 'Advisor without CBO_DESC Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'CNT_NO_AGCY_AFFLTN_ID' , CNT_NO_AGCY_AFFLTN_ID
,'CNT_NO_CBO_DESC', CNT_NO_CBO_DESC 
) AS VARCHAR(100) ) AS SRC_VAL


FROM 

(
SELECT 'NA' AS CNT_NO_AGCY_AFFLTN_ID
, 'NA' AS CNT_NO_CBO_DESC
) FACT 


CROSS JOIN 
(
SELECT 'CNT_NO_AGCY_AFFLTN_ID' AS METRIC_NM
UNION 
SELECT 'CNT_NO_CBO_DESC'
) METRIC


WHERE 
DECODE(METRIC.METRIC_NM, 
'CNT_NO_AGCY_AFFLTN_ID' , CNT_NO_AGCY_AFFLTN_ID
,'CNT_NO_CBO_DESC', CNT_NO_CBO_DESC                       
) IS NOT NULL 


) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/


-- GA_HIST --  
 
INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS  
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)


SELECT  
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 'NA' AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'GA_HIST' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'General Agent' as Bus_Nm,
'General Agent' AS RCRD_TYP_NM,

DECODE(METRIC.METRIC_NM, 
'INACTV_AGY_COUNT','Inactive Agency Count'
) AS METRIC_NM , 

(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,

CAST( 
DECODE(METRIC.METRIC_NM, 
'INACTV_AGY_COUNT',INACTV_AGY_COUNT) 
AS VARCHAR(100) ) 
AS TGT_VAL

FROM 

(
select  count(*) as INACTV_AGY_COUNT
from PROD_USIG_CRCOG_DM.GA_HIST where  AGCY_AFFLTN_ID NOT IN (
select distinct AGCY_AFFLTN_ID from PROD_USIG_CRCOG_DM.GA_HIST 
where GA_REL_END_DT='9999-12-31' )
) FACT 

CROSS JOIN 
(
SELECT 'INACTV_AGY_COUNT'  AS METRIC_NM
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'INACTV_AGY_COUNT',INACTV_AGY_COUNT
) IS NOT NULL 


) TGT;


/*-----------------------------------------------------------------------------------*/

-- NFF_FACT 

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

SELECT 
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM 

(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NFF_FACT' as Tbl_Nm,
'Fact' as tbl_Typ_nm ,
'Net Field Force' as Bus_Nm,
'NFF Fact Counts' AS RCRD_TYP_NM,
Fact.CYCLE_DT as Cycle_dt,  
'Year To Date NFF Counts' AS METRIC_NM , 
CAST( FACT.YTD_NFF_CNT AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

SELECT  SUM(YTD_NFF_CNT) AS YTD_NFF_CNT,MAX(CYCLE_DT) as CYCLE_DT 
FROM prod_usig_crcog_dm.NFF_FACT
WHERE CYCLE_DT=(SELECT MAX(CYCLE_DT) from  prod_usig_crcog_dm.NFF_FACT ) 

) FACT 


) TGT 


JOIN 


(

SELECT 
'NFF_FACT' as Tbl_Nm,
'Year To Date NFF Counts' AS METRIC_NM , 
CAST( FACT.YTD_NFF_CNT AS VARCHAR(100) ) AS SRC_VAL

FROM 

(

SELECT YTD_NFF_CNT
 from ( SELECT 
 SUM(YTD_NFF_CNT) AS YTD_NFF_CNT
FROM (
SELECT NFF_AGT_CDE, SRC_NFF_ACTV_CDE,NFF_ACTV_DT,NFF.date_format,CAL.CAL_DT,   
CASE 
 WHEN  SRC_NFF_ACTV_CDE  IN ('06','03','04','08') AND NFF_ACTV_DT >= date_format AND NFF_ACTV_DT <= CAL_Dt THEN  1
        WHEN SRC_NFF_ACTV_CDE = '01' AND NFF_TO_DT > date_format AND      NFF_ACTV_DT < date_format then 1
        WHEN  SRC_NFF_ACTV_CDE  IN ('05','07','02','09') AND NFF_ACTV_DT >= date_format AND NFF_ACTV_DT <= CAL_Dt  THEN -1 ELSE 0 
END AS YTD_NFF_CNT    

FROM 

(

SELECT      
NFF.MERGED_AGY_ID AS NFF_AGY, NFF.NFF_ID AS NFF_ID, NFF.NFF_AGT_CDE AS NFF_AGT_CDE, NFF.NFF_AGY,
              NFF.SRC_NFF_ACTV_CDE AS SRC_NFF_ACTV_CDE,

CASE WHEN NFF.NFF_ACTV_DT = to_date('0001-01-01','YYYY-MM-DD') then NULL ELSE NFF.NFF_ACTV_DT END AS NFF_ACTV_DT,
CASE WHEN NFF.NFF_FT_STRT_DT = to_date('0001-01-01','YYYY-MM-DD') then NULL ELSE NFF.NFF_FT_STRT_DT END AS NFF_FT_STRT_DT,
CASE WHEN NFF.NFF_FT_END_DT = to_date('0001-01-01','YYYY-MM-DD') then NULL ELSE NFF.NFF_FT_END_DT END AS NFF_FT_END_DT,
CASE WHEN NFF.NFF_CO_TERM_DT = to_date('0001-01-01','YYYY-MM-DD') then NULL ELSE NFF.NFF_CO_TERM_DT END AS NFF_CO_TERM_DT,
CASE WHEN NFF.NFF_TO_DT = to_date('0001-01-01','YYYY-MM-DD') then NULL ELSE NFF.NFF_TO_DT END AS NFF_TO_DT,

SUM( CASE WHEN COMM.YTD_COMM_IND = 'CY' THEN( COMMISSION_PAID_AMOUNT ) ELSE 0 END ) AS CY_FYC,
SUM( CASE WHEN COMM.YTD_COMM_IND = 'PY' THEN( COMMISSION_PAID_AMOUNT ) ELSE 0 END ) AS PY_FYC,
CAL_DIM.CAL_SID AS CAL_SID ,

(
            SELECT MIN(CAL_DT) from PROD_USIG_CRCOG_DM.CAL
              WHERE CAL_YR= extract(year from Current_date) and CAL_DT<>'0001-01-01'
              ) as date_format 
FROM   
( 
SELECT 
NFF_AGT_CDE,
MERGED_AGY_ID,
NFF_AGY,
SRC_NFF_ACTV_CDE,
NFF_ACTV_DT,              
NFF_ACTV_CDE,
NFF_FT_STRT_DT,
NFF_FT_END_DT,
NFF_CO_TERM_DT,
NFF_TO_DT,
NFF_ID,
CRR_YEAR,
NFF_YEAR,
(CAST(CRR_YEAR - NFF_YEAR + 1 AS INTEGER)) AS NFF_HIRING_YEAR,
CRR_JULLIAN,
NF_JULLIAN,
SUBSTR(to_char((to_number(CRR_JULLIAN)- to_number(NF_JULLIAN)+ 1000)),5,4) AS ADVISOR_YEAR_COUNT,              
CURR_FIRST_DAY,
SRC_DEL_IND,
TRANS_DT     

FROM   ( 
SELECT 
NFF.NFF_AGT_CDE AS NFF_AGT_CDE,
AGY_MRG. AFFILIATED_AGY AS MERGED_AGY_ID,
NFF.NFF_AGY AS NFF_AGY,
NFF.SRC_NFF_ACTV_CDE AS SRC_NFF_ACTV_CDE,
NFF.NFF_ACTV_DT AS NFF_ACTV_DT,
NFF.NFF_ACTV_CDE AS NFF_ACTV_CDE,
NFF.NFF_FT_STRT_DT AS NFF_FT_STRT_DT,
NFF.NFF_FT_END_DT AS NFF_FT_END_DT,
NFF_CO_TERM_DT AS NFF_CO_TERM_DT,
NFF.NFF_TO_DT AS NFF_TO_DT,
NFF.NFF_ID AS NFF_ID,
EXTRACT(YEAR FROM CURRENT_DATE) AS CRR_YEAR,
EXTRACT(YEAR FROM NFF.NFF_FT_STRT_DT) AS NFF_YEAR,
(EXTRACT(YEAR FROM CURRENT_DATE))||(EXTRACT(DAY FROM CURRENT_DATE)) AS CRR_JULLIAN,
(EXTRACT(YEAR FROM NFF.NFF_FT_STRT_DT))||(EXTRACT(DAY FROM NFF.NFF_FT_STRT_DT)) AS NF_JULLIAN,
cast(( extract( year from current_date )|| '-01-01' )as DATE) AS CURR_FIRST_DAY,
NFF.SRC_DEL_IND AS SRC_DEL_IND,
NFF.TRANS_DT AS TRANS_DT,
RANK() OVER( PARTITION BY NFF.NFF_AGT_CDE, NFF.SRC_NFF_ACTV_CDE, NFF.NFF_ACTV_DT ORDER BY NFF.NFF_TO_DT DESC) as RA 

FROM   PROD_STND_PRTY_VW.NFF_DATA_VW NFF
INNER JOIN PROD_USIG_CMN_VW.AGY_CLOSE_MERGE_DATA_VW AGY_MRG ON AGY_MRG.AGY_ID = NFF.NFF_AGY 
WHERE  NFF.SRC_NFF_ACTV_CDE = 01  AND NFF.SRC_DEL_IND = 'N'  
)ABC  WHERE  ABC.RA= 1    

UNION ALL 

SELECT 
NFF_AGT_CDE,
MERGED_AGY_ID,
NFF_AGY,
SRC_NFF_ACTV_CDE,
NFF_ACTV_DT,
NFF_ACTV_CDE,
NFF_FT_STRT_DT,
NFF_FT_END_DT,
NFF_CO_TERM_DT,
NFF_TO_DT,
NFF_ID,
CRR_YEAR,
NFF_YEAR,
(CAST(CRR_YEAR - NFF_YEAR + 1 AS INTEGER)) AS NFF_HIRING_YEAR,
CRR_JULLIAN,
NF_JULLIAN,
SUBSTR(to_char((to_number(CRR_JULLIAN)- to_number(NF_JULLIAN)+ 1000)),5,4) AS ADVISOR_YEAR_COUNT,
CURR_FIRST_DAY,
SRC_DEL_IND,
TRANS_DT     
FROM   ( 
SELECT 
NFF.NFF_AGT_CDE AS NFF_AGT_CDE,
AGY_MRG. AFFILIATED_AGY AS MERGED_AGY_ID,
NFF.NFF_AGY AS NFF_AGY,
NFF.SRC_NFF_ACTV_CDE AS SRC_NFF_ACTV_CDE,
NFF.NFF_ACTV_DT AS NFF_ACTV_DT,
NFF.NFF_ACTV_CDE AS NFF_ACTV_CDE,
NFF.NFF_FT_STRT_DT AS NFF_FT_STRT_DT,
NFF.NFF_FT_END_DT AS NFF_FT_END_DT,
NFF_CO_TERM_DT AS NFF_CO_TERM_DT,
NFF.NFF_TO_DT AS NFF_TO_DT,
NFF.NFF_ID AS NFF_ID,
EXTRACT(YEAR FROM CURRENT_DATE) AS CRR_YEAR,
EXTRACT(YEAR FROM NFF.NFF_FT_STRT_DT) AS NFF_YEAR,
(EXTRACT(YEAR FROM CURRENT_DATE))||(EXTRACT(DAY FROM CURRENT_DATE)) AS CRR_JULLIAN,
(EXTRACT(YEAR FROM NFF.NFF_FT_STRT_DT))||(EXTRACT(DAY FROM NFF.NFF_FT_STRT_DT)) AS NF_JULLIAN,
cast(( extract( year from current_date )|| '-01-01' )as DATE) AS CURR_FIRST_DAY,
NFF.SRC_DEL_IND AS SRC_DEL_IND,
NFF.TRANS_DT AS TRANS_DT,
RANK() OVER(PARTITION BY AGY_MRG. AFFILIATED_AGY, NFF.NFF_AGT_CDE, NFF.SRC_NFF_ACTV_CDE, NFF.NFF_ACTV_DT ORDER BY NFF.NFF_TO_DT DESC) as RA 

FROM   PROD_STND_PRTY_VW.NFF_DATA_VW NFF
INNER JOIN PROD_USIG_CMN_VW.AGY_CLOSE_MERGE_DATA_VW AGY_MRG ON AGY_MRG.AGY_ID = NFF.NFF_AGY 
WHERE  NFF.SRC_NFF_ACTV_CDE in('02','03','04','05','06','07','08','09') AND NFF.SRC_DEL_IND = 'N' 
OR( NFF.SRC_DEL_IND = 'Y' AND ( NFF.TRANS_DT = to_date('2012-12-31',  'YYYY-MM-DD') 
OR NFF.TRANS_DT =to_date( '2013-12-31', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2014-12-31', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2015-12-31', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2016-12-31', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2017-12-29', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2019-01-02', 'YYYY-MM-DD') 
OR NFF.TRANS_DT = to_date( '2020-01-02', 'YYYY-MM-DD') ) 
) 

)DEF WHERE  DEF.RA= 1 

)   NFF 

INNER JOIN PROD_USIG_CMN_VW.AGY_CLOSE_MERGE_DATA_VW AGY_MRG ON AGY_MRG.AGY_ID = NFF.MERGED_AGY_ID 
INNER JOIN( SELECT cast( RUN_CTL.TRANS_DT as date ) AS TRANS_TS, RUN_CTL.RUN_ID AS RUN_ID FROM   PROD_USIG_CMN.RUN_CTL RUN_CTL WHERE  SRC_SYS_ID = 104 AND PROCESS_SW = 'N' 
AND RUN_ID in( SELECT MAX( RUN_ID ) AS RUN_ID FROM   PROD_USIG_CMN.RUN_CTL WHERE  SRC_SYS_ID = 104 AND PROCESS_SW = 'N' ) 
) RUN_CTL ON 1 = 1 INNER JOIN PROD_USIG_CRCOG_DM_VW.CAL_VW CAL_DIM 

ON RUN_CTL.TRANS_TS = CAL_DIM.CAL_DT 

LEFT OUTER JOIN( SELECT COMM.ADVISOR_NAME AS ADVISOR_NAME,
SUM( COMM.COMMISSION_PAID_AMOUNT ) AS COMMISSION_PAID_AMOUNT, COMM.ADVISOR_BPID AS ADVISOR_BPID,
              AGY_MRG. AFFILIATED_AGY AS MERGED_AGY_ID,
              CAL.YTD_COMM_IND AS YTD_COMM_IND 
FROM   PROD_USIG_STND_VW.AGMT_COMM_TXN_EXT_VW COMM INNER JOIN PROD_USIG_CMN_VW.AGY_CLOSE_MERGE_DATA_VW AGY_MRG 
       ON AGY_MRG.AGY_ID = COMM.AGENCY_ID INNER JOIN PROD_USIG_CMN_VW.SLS_DTRB_CAL_VW CAL 
       ON CAL.CAL_DT = COMM.CYCLE_DT 
       AND( CAL.YTD_COMM_IND = 'CY' 
       or CAL.YTD_COMM_IND = 'PY' ) 
WHERE  COMM.FIRST_RENEWAL_YR_COMP_CD = 'FRSTYEAR'    
       AND COMM.COMPENSATION_SUB_TYPE_CD <> 'DIBRBON' 
       AND COMM.LINE_OF_BUSINESS_CODE IN( 'LIFE', 'ANN', 'DI', 'LTC' ) 
       AND COMPENSATION_SUB_TYPE_CD <> 'EXCESS' 
GROUP BY 1, 3, 4, 5 ) COMM 
       ON COMM.ADVISOR_BPID = NFF.NFF_AGT_CDE 
       AND COMM.MERGED_AGY_ID = NFF.MERGED_AGY_ID 
WHERE  ( NFF.SRC_NFF_ACTV_CDE in( '02', '03', '04', '05', '06', '07', '08', '09' ) 
       and ( ( EXTRACT(MONTH FROM CURRENT_DATE)= 2 
       AND EXTRACT(DAY     FROM CURRENT_DATE)= 29 
       AND NFF.NFF_ACTV_DT > CAST( EXTRACT( YEAR FROM( CURRENT_DATE - 1 )- INTERVAL '4' YEAR )|| '-01-01' AS DATE)) 
       OR NFF.NFF_ACTV_DT > CAST( EXTRACT( YEAR FROM( CURRENT_DATE)- INTERVAL '4' YEAR )|| '-01-01' AS DATE) ) 
       AND NFF.SRC_DEL_IND <> 'Y' ) 
       OR NFF.SRC_NFF_ACTV_CDE = '01' 
       OR( NFF.SRC_DEL_IND = 'Y' 
       AND( NFF.TRANS_DT = to_date('2012-12-31', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT =to_date( '2013-12-31', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2014-12-31', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2015-12-31', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2016-12-31', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2017-12-29', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2019-01-02', 'YYYY-MM-DD') 
       OR NFF.TRANS_DT = to_date( '2020-01-02', 'YYYY-MM-DD') ) 
) 
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13,14
)NFF join (SELECT CAL_DT,CAL_SID from prod_usig_crcog_dm.CAL) CAL on NFF.CAL_SID=CAL.CAL_SID) B  
) Final WHERE 
 YTD_NFF_CNT <>0
) FACT 


) SRC  ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM)  and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-----------------------------------------------------------------------------------*/

-- SEC_COMP_ADVSR_FACT --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Name AS Schema_Name,TGT.Table_Name AS Table_Name,TGT.table_Type AS table_Type, 
TGT.Business_Name AS Business_Name, SRC.SOURCE_VALUE AS SOURCE_VALUE,TGT.TARGET_VALUE AS TARGET_VALUE,
TGT.Rec_Type AS Rec_Type, TGT.METRIC_NAME AS METRIC_NAME,TGT.Cycle_date AS Cycle_date,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'SEC_COMP_ADVSR_FACT' as Table_Name,
'Fact' as table_Type ,
'SEC_COMP' as Business_Name,
'SEC_COMP' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'DOA_ANN_SEC_COMP_PAYABLE_AMT' , 'DOA Annuity Secondary Compensation Payable Amount', 
'DOA_SEC_COMP_PAYABLE_AMT','DOA Secondary Compensation Payable Amount',
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT','DOA Non Secondary Compensation Payable Amount'
) AS METRIC_NAME , 

TRUNC(CAST( 
DECODE(METRIC.METRIC_NAME, 
'DOA_ANN_SEC_COMP_PAYABLE_AMT' , DOA_ANN_SEC_COMP_PAYABLE_AMT, 
'DOA_SEC_COMP_PAYABLE_AMT',DOA_SEC_COMP_PAYABLE_AMT,
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT',DOA_NON_ANN_SEC_COMP_PAYABLE_AMT                             
) AS VARCHAR(100) ),2) AS TARGET_VALUE

FROM 

(
SELECT 
CYCLE_DT, SEC_COMP_TYP_CD,
SUM ( case when TRIM(SEC_COMP_TYP_CD) ='DOA ANN' then SEC_COMP_PAYABLE_AMT Else 0.00 end )as DOA_ANN_SEC_COMP_PAYABLE_AMT,
SUM ( case when TRIM(SEC_COMP_TYP_CD)  ='DOA' then SEC_COMP_PAYABLE_AMT Else 0.00 end )as DOA_SEC_COMP_PAYABLE_AMT,
SUM ( case when TRIM(SEC_COMP_TYP_CD) ='DOA NON-ANN' then SEC_COMP_PAYABLE_AMT Else 0.00 end )as DOA_NON_ANN_SEC_COMP_PAYABLE_AMT

FROM prod_usig_crcog_dm.SEC_COMP_ADVSR_FACT 
where CYCLE_DT = (select MAX(CYCLE_DT)FROM prod_usig_crcog_dm.SEC_COMP_ADVSR_FACT) 
GROUP BY 1 ,2 
) FACT 

CROSS JOIN 
(
SELECT 'DOA_ANN_SEC_COMP_PAYABLE_AMT' AS METRIC_NAME
UNION 
SELECT 'DOA_SEC_COMP_PAYABLE_AMT'
UNION 
SELECT 'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'DOA_ANN_SEC_COMP_PAYABLE_AMT' , DOA_ANN_SEC_COMP_PAYABLE_AMT, 
'DOA_SEC_COMP_PAYABLE_AMT',DOA_SEC_COMP_PAYABLE_AMT,
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT',DOA_NON_ANN_SEC_COMP_PAYABLE_AMT
 ) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'SEC_COMP_ADVSR_FACT' as Table_Name,
'Fact' as table_Type ,
'SEC_COMP' as Business_Name,
'SEC_COMP' AS Rec_Type,
FACT.CYCLE_DT as Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'DOA_ANN_SEC_COMP_PAYABLE_AMT' , 'DOA Annuity Secondary Compensation Payable Amount', 
'DOA_SEC_COMP_PAYABLE_AMT','DOA Secondary Compensation Payable Amount',
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT','DOA Non Secondary Compensation Payable Amount'
) AS METRIC_NAME , 

TRUNC(CAST( 
DECODE(METRIC.METRIC_NAME, 
'DOA_ANN_SEC_COMP_PAYABLE_AMT' , DOA_ANN_SEC_COMP_PAYABLE_AMT, 
'DOA_SEC_COMP_PAYABLE_AMT',DOA_SEC_COMP_PAYABLE_AMT,
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT',DOA_NON_ANN_SEC_COMP_PAYABLE_AMT                             
) AS VARCHAR(100) ),2) AS  SOURCE_VALUE

FROM 

(

SELECT

SC.SEC_COMP_TYP_CD,
SC.COMM_CLOS_DT as CYCLE_DT,
SUM ( case when TRIM(SEC_COMP_TYP_CD) ='DOA ANN' then SEC_COMP_ADJ_AMT Else 0.00 end )as DOA_ANN_SEC_COMP_PAYABLE_AMT,
SUM ( case when TRIM(SEC_COMP_TYP_CD)  ='DOA' then SEC_COMP_ADJ_AMT Else 0.00 end )as DOA_SEC_COMP_PAYABLE_AMT,
SUM ( case when TRIM(SEC_COMP_TYP_CD) ='DOA NON-ANN' then SEC_COMP_ADJ_AMT Else 0.00 end )as DOA_NON_ANN_SEC_COMP_PAYABLE_AMT

FROM

(
SELECT 
 SCA.BP_ID AS BP_ID,
TRIM(leading '0' from SCA.AGY_NR) AS AGY_NR,
SCA.SECONDARY_BPID AS SECONDARY_BPID,
SCA.SEC_COMP_CAT_TYPE_CD AS SEC_COMP_CAT_TYPE_CD,
 SCA.SEC_COMP_TYP_CD AS SEC_COMP_TYP_CD,
 SCA.PAY_SYS_CYCLE_DT AS CYCLE_DT,
 SCA.SEC_COMP_ADJ_DT AS COMM_CLOS_DT,
 SCA.SEC_COMP_ADJ_AMT AS SEC_COMP_ADJ_AMT,
 SCA.SRC_SYS_ID AS SRC_SYS_ID
FROM PROD_STND_CRCOG_TBLS.SEC_COMP_ADJ SCA 
WHERE SCA.TRANS_DT=(SELECT MAX(CAST(TRANS_DT AS DATE)) FROM PROD_STND_CRCOG_TBLS.SEC_COMP_ADJ where Year(TRANS_DT)=year(current_date))
and LTRIM(RTRIM(SCA.SEC_COMP_CAT_TYPE_CD))='DOA'

UNION ALL

SELECT
SCS.PRMRY_PAY_ENTY_BPID AS BP_ID,
TRIM(leading '0' from SCS.FIRM_ID )AS AGY_NR,
SCS.SCNDRY_PAY_ENTY_BPID AS SECONDARY_BPID,
SCS.SRC_SEC_COMP_TYP_CD AS SRC_SEC_COMP_TYP_CD,
SCS.SEC_COMP_TYP_CD AS SEC_COMP_TYP_CD,
SCS.COMM_CLOS_DT AS CYCLE_DT,
SCS.COMM_CLOS_DT AS COMM_CLOS_DT,
SCS.SEC_COMP_TOT_PAYABLE_AMT AS SEC_COMP_ADJ_AMT,
SCS.SRC_SYS_ID AS SRC_SYS_ID
FROM
PROD_STND_CRCOG_TBLS.SEC_COMP_SUM SCS
WHERE SCS.TRANS_DT=(SELECT MAX(CAST(TRANS_DT AS DATE)) FROM PROD_STND_CRCOG_TBLS.SEC_COMP_SUM where Year(TRANS_DT)=year(current_date))
and LTRIM(RTRIM(SCS.SRC_SEC_COMP_TYP_CD))='DOA'
)SC --where  COMM_CLOS_DT=(SELECT Max(COMM_CLOS_DT) FROM PROD_STND_CRCOG_TBLS.SEC_COMP_SUM)
group by 1,2
) FACT 

CROSS JOIN 
(
SELECT 'DOA_ANN_SEC_COMP_PAYABLE_AMT' AS METRIC_NAME
UNION 
SELECT 'DOA_SEC_COMP_PAYABLE_AMT'
UNION 
SELECT 'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'DOA_ANN_SEC_COMP_PAYABLE_AMT' , DOA_ANN_SEC_COMP_PAYABLE_AMT, 
'DOA_SEC_COMP_PAYABLE_AMT',DOA_SEC_COMP_PAYABLE_AMT,
'DOA_NON_ANN_SEC_COMP_PAYABLE_AMT',DOA_NON_ANN_SEC_COMP_PAYABLE_AMT
 
) IS NOT NULL 
 

) SRC ON  TGT.Cycle_date=SRC.Cycle_date and TGT.METRIC_NAME=SRC.METRIC_NAME;



/*-----------------------------------------------------------------------------------*/

-- UNIT_MGR --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
CASE WHEN SRC.SRC_VAL < 0 THEN 'NA' ELSE SRC.SRC_VAL END AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'UNIT_MGR' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Unit Manager' as bus_nm,
'Unit Manager' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'UNIT_MGR_ACTV' , 'Unit Manager Active Counts'
,'UNIT_NO_MGR_BPID', 'SM Unit without Manager BPID Counts'
,'OVERLAP_DATES', 'Overlap Date Counts'
,'MULTI_ACTV_PER_UNIT', 'Multiple Active record per Unit Counts'
) AS METRIC_NM , 



CAST( 
DECODE(METRIC.METRIC_NM,
'UNIT_MGR_ACTV', UNIT_MGR_ACTV,   
'UNIT_NO_MGR_BPID', UNIT_NO_MGR_BPID,
'OVERLAP_DATES', OVERLAP_DATES,
'MULTI_ACTV_PER_UNIT', MULTI_ACTV_PER_UNIT
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(SELECT UNIT_MGR_ACTV
,UNIT_NO_MGR_BPID
,OVERLAP_DATES
,MULTI_ACTV_PER_UNIT
FROM 
(
SELECT 
count(DISTINCT  UNIT_MGR_BPID) AS UNIT_MGR_ACTV
FROM 
prod_usig_crcog_dm.UNIT_MGR um
where  um.unit_nr not like '-%'
AND um.unit_mgr_stp_dt = '9999-12-31' and trim(UNIT_MGR_BPID)<>'' and UNIT_MGR_EFF_END_DT='9999-12-31'

) DM1
CROSS JOIN
(
SELECT 
COUNT(DISTINCT unit_nr) AS UNIT_NO_MGR_BPID
FROM 
prod_usig_crcog_dm.UNIT_MGR um
where  um.unit_nr not like '-%'
AND lower(trim(um.UNIT_TYP)) IN ('career unit','sm') AND nvl(TRIM(um.UNIT_MGR_TYP),'')='' AND um.UNIT_ACTV_IND = 'A' AND um.unit_mgr_stp_dt = '9999-12-31'
) unm

CROSS JOIN
(
SELECT count(DISTINCT UNIT_NR) AS MULTI_ACTV_PER_UNIT FROM 
(
SELECT unit_nr, count(*)
from prod_usig_crcog_dm.UNIT_MGR 
WHERE UNIT_ACTV_IND = 'A'
AND unit_mgr_stp_dt = '9999-12-31'
AND lower(trim(UNIT_TYP)) IN ('career unit','sm')
AND  trim(UNIT_MGR_BPID)<>'' and UNIT_MGR_EFF_STRT_DT='9999-12-31'
GROUP BY unit_nr
HAVING count(*) > 1
) a

) DM2

CROSS JOIN
(SELECT count(DISTINCT unit_nr) as OVERLAP_DATES
FROM (
SELECT DISTINCT unit_nr, unit_bpid,UNIT_MGR_STRT_DT,UNIT_MGR_STP_DT, PREV_END_DT, NEXT_ST_DT,  UNIT_MGR_STRT_DT - PREV_END_DT AS DIF1,
NEXT_ST_DT - UNIT_MGR_STP_DT AS DIF2

FROM
(
SELECT DISTINCT unit_nr, unit_bpid,UNIT_MGR_STRT_DT,UNIT_MGR_STP_DT,
MIN(UNIT_MGR_STP_DT) OVER (PARTITION BY unit_nr ORDER BY UNIT_MGR_STRT_DT ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREV_END_DT,
MAX(UNIT_MGR_STRT_DT) OVER (PARTITION BY unit_nr ORDER BY UNIT_MGR_STRT_DT ASC ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ST_DT

FROM
( 
SELECT DISTINCT
unit_nr,unit_bpid,UNIT_MGR_STRT_DT,UNIT_MGR_STP_DT
FROM PROD_USIG_CRCOG_DM.unit_mgr
WHERE UNIT_MGR_STRT_DT<UNIT_MGR_STP_DT
AND UNIT_ACTV_IND = 'A'
 AND UNIT_MGR_STP_DT = '9999-12-31'
 AND lower(trim(UNIT_TYP)) IN ('career unit', 'sm')
) A

) B
) C WHERE (DIF1<1 OR DIF2<1)
) DM3
  
) DM 

CROSS JOIN 
(
SELECT 'UNIT_MGR_ACTV' AS METRIC_NM
UNION 
SELECT 'UNIT_NO_MGR_BPID'
UNION 
SELECT 'OVERLAP_DATES'
UNION
SELECT 'MULTI_ACTV_PER_UNIT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_ACTV' , UNIT_MGR_ACTV, 
'UNIT_NO_MGR_BPID', UNIT_NO_MGR_BPID,
'OVERLAP_DATES', OVERLAP_DATES,
'MULTI_ACTV_PER_UNIT', MULTI_ACTV_PER_UNIT
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'UNIT_MGR' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Unit Manager' as bus_nm,
'Unit Manager' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'UNIT_MGR_ACTV' , 'Unit Manager Active Counts'
,'UNIT_NO_MGR_BPID', 'SM Unit without Manager BPID Counts'
,'OVERLAP_DATES', 'Overlap Date Counts'
,'MULTI_ACTV_PER_UNIT', 'Multiple Active record per Unit Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM,
'UNIT_MGR_ACTV', UNIT_MGR_ACTV,   
'UNIT_NO_MGR_BPID', UNIT_NO_MGR_BPID,
'OVERLAP_DATES', OVERLAP_DATES,
'MULTI_ACTV_PER_UNIT', MULTI_ACTV_PER_UNIT
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(SELECT UNIT_MGR_ACTV
,UNIT_NO_MGR_BPID
,-1 AS OVERLAP_DATES
,-1 AS MULTI_ACTV_PER_UNIT
FROM 
(
SELECT 
SUM ( CASE WHEN  lower(trim(UNT_TYP)) IN ('career unit','sm') AND nvl(TRIM(UNIT_MGR_TYP),'')='' AND UNIT_ACTV_IND = 'A' AND UNIT_MGR_STP_DT = '9999-12-31'  THEN 1 ELSE 0 END) AS UNIT_NO_MGR_BPID
FROM 
PROD_USIG_CRCOG_DM.UNT
where  unit_nr not like '-%'
) EDW1 

CROSS JOIN
(SELECT count(DISTINCT UNIT_MGR_BPID) AS UNIT_MGR_ACTV
FROM 
PROD_USIG_CRCOG_DM.UNT
where  unit_nr not like '-%'
AND UNIT_ACTV_IND = 'A' AND UNIT_MGR_STP_DT = '9999-12-31'  AND  trim(UNIT_MGR_BPID)<>'') act_src

) EDW 

CROSS JOIN 
(
SELECT 'UNIT_MGR_ACTV' AS METRIC_NM
UNION 
SELECT 'UNIT_NO_MGR_BPID'
UNION 
SELECT 'OVERLAP_DATES'
UNION
SELECT 'MULTI_ACTV_PER_UNIT'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'UNIT_MGR_ACTV' , UNIT_MGR_ACTV, 
'UNIT_NO_MGR_BPID', UNIT_NO_MGR_BPID,
'OVERLAP_DATES', OVERLAP_DATES,
'MULTI_ACTV_PER_UNIT', MULTI_ACTV_PER_UNIT
) IS NOT NULL 


) SRC 
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;



/*-------------------------------------------------------------------------------------------------------*/


-- ADVSR --

INSERT INTO  PROD_USIG_CRCOG_DM.TBL_METRIC_RECONC_STATS  
( SCHEMA_NM, TBL_NM, TBL_TYP_NM, BUS_NM, SRC_VAL, TGT_VAL,  RCRD_TYP_NM, METRIC_NM, CYCLE_DT, LST_MOD_TS )


select 
TGT.Schema_NM AS Schema_NM,TGT.TBL_NM AS TBL_NM,TGT.TBL_TYP_NM AS TBL_TYP_NM, 
TGT.bus_nm AS bus_nm, 
SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM
(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_NM,
'ADVSR' as TBL_NM,
'Dimension' as TBL_TYP_NM ,
'Advisor' as bus_nm,
'Advisor Dimension' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,  


DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY','Advisor Counts',
'ADVSR_ACTIVE_QTY','Advisor Active Counts',
'ADVSR_INACTIVE_QTY','Advisor Inactive Counts',
'INVALID_LOS_YOS_QTY','Invalid Length of Service / Years of Service Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY',ADVSR_QTY,
'ADVSR_ACTIVE_QTY',ADVSR_ACTIVE_QTY,
'ADVSR_INACTIVE_QTY',ADVSR_INACTIVE_QTY,
'INVALID_LOS_YOS_QTY',INVALID_LOS_YOS_QTY
) AS VARCHAR(100) ) 
 AS TGT_VAL

FROM 

(
SELECT DISTINCT
	advsr_qty,
	advsr_ACTIVE_qty,
	advsr_INACTIVE_qty,
	INVALID_LOS_YOS_QTY
FROM
	(
	SELECT
		COUNT(*) AS advsr_qty
		,count(CASE WHEN ADVSR_ACTV_IND = 'Y' THEN advsr_sid end ) AS ADVSR_ACTIVE_QTY
		,count(CASE WHEN ADVSR_ACTV_IND = 'N' THEN advsr_sid end ) AS ADVSR_INACTIVE_QTY
	FROM
		PROD_USIG_CRCOG_DM.ADVSR 
		WHERE  govt_id <> '999999999'
		AND govt_id NOT LIKE 'UNK%'
		AND trim(govt_id) <> ''
		)a 
	,
	(SELECT count(*) AS INVALID_LOS_YOS_QTY
FROM
	(
	SELECT
		*
	FROM
		(
		SELECT
			NFF_AGT_CDE,
			NFF_FT_STRT_DT,
			NFF_FT_END_DT ,
			NFF_AGY,
			NFF_ACTV_DT,
			CASE
				WHEN LEN_OF_SVC>4 THEN '5+'
				ELSE LEN_OF_SVC
		END AS LEN_OF_SVC_EXPECTED ,
			YR_OF_SVC AS YR_OF_SVC_EXPECTED ,
			ADV_LEN_OF_SVC ,
			ADV_YR_OF_SVC
		FROM
			(
			
			SELECT
				ROW_NUMBER() OVER(PARTITION BY NFF_AGT_CDE
			ORDER BY
                NFF_ACTV_DT DESC,NFF_FT_STRT_DT DESC,NFF_FT_END_DT DESC, CURR_IND DESC ) AS RW,
				NFF_AGT_CDE,
				NFF_FT_STRT_DT,
				NFF_FT_END_DT ,
				NFF_AGY,
				TRANS_DT,
				NFF_ACTV_DT,
				CASE
					WHEN NFF_FT_END_DT = '01-01-0001' 
					  THEN CAST(EXTRACT(YEAR FROM NFF_ACTV_DT)-EXTRACT(YEAR FROM NFF_FT_STRT_DT) AS CHAR(10))
					ELSE CAST(EXTRACT(YEAR FROM	NFF_FT_END_DT)-EXTRACT(YEAR FROM NFF_FT_STRT_DT) AS CHAR(10))
			    END AS LEN_OF_SVC,
				CASE
					WHEN NFF_FT_END_DT = '01-01-0001' 
					  THEN (EXTRACT(YEAR FROM NFF_ACTV_DT)-EXTRACT(YEAR FROM NFF_FT_STRT_DT))
					ELSE (EXTRACT(YEAR FROM	NFF_FT_END_DT)-EXTRACT(YEAR	FROM NFF_FT_STRT_DT))
			    END AS YR_OF_SVC ,
				ADV.LEN_OF_SVC AS ADV_LEN_OF_SVC ,
				ADV.YR_OF_SVC AS ADV_YR_OF_SVC ,
				NFF_ACTV_CDE
			FROM
				PROD_STND_PRTY.NFF NFF
			JOIN PROD_USIG_CRCOG_DM.ADVSR ADV ON
				ADV.BP_ID = NFF.NFF_AGT_CDE
			WHERE
				TRIM(UPPER(NFF_ACTV_CDE)) IN ('TERMCAS','RCRTTERM') AND CURR_IND = 'Y' and trim(nff.nff_cnt_cde)<>'AAC' )A
		WHERE
			RW = 1 ) ABC
	WHERE
		(ABC.LEN_OF_SVC_EXPECTED <> ADV_LEN_OF_SVC
		OR ABC.YR_OF_SVC_EXPECTED <> ADV_YR_OF_SVC) ) DRVD ) cc
) FACT 

CROSS JOIN 
(
SELECT 'ADVSR_QTY'  AS METRIC_NM
UNION 
SELECT 'ADVSR_ACTIVE_QTY'
UNION 
SELECT 'ADVSR_INACTIVE_QTY'
UNION 
SELECT 'INVALID_LOS_YOS_QTY'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY',ADVSR_QTY,
'ADVSR_ACTIVE_QTY',ADVSR_ACTIVE_QTY,
'ADVSR_INACTIVE_QTY',ADVSR_INACTIVE_QTY,
'INVALID_LOS_YOS_QTY',INVALID_LOS_YOS_QTY
) IS NOT NULL 



) TGT


JOIN 



(


SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_NM,
'ADVSR' as TBL_NM,
'Dimension' as TBL_TYP_NM ,
'Advisor' as bus_nm,
'Advisor Dimension' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL WHERE CAL_DT<>'0001-01-01' ) as Cycle_dt,  
 
 DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY','Advisor Counts',
'ADVSR_ACTIVE_QTY','Advisor Active Counts',
'ADVSR_INACTIVE_QTY','Advisor Inactive Counts',
'INVALID_LOS_YOS_QTY','Invalid Length of Service / Years of Service Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY',ADVSR_QTY,
'ADVSR_ACTIVE_QTY',ADVSR_ACTIVE_QTY,
'ADVSR_INACTIVE_QTY',ADVSR_INACTIVE_QTY,
'INVALID_LOS_YOS_QTY', INVALID_LOS_YOS_QTY
) AS VARCHAR(100) ) 
 AS SRC_VAL

FROM 

(
WITH src_edw AS (
SELECT demo.PRTY_STUS,NFF_ACTV_CDE,DEMO.CAS_IND
,CASE WHEN SUBSTR(TRIM(PRTY_STUS),1,1)='A' THEN 'Y' ELSE 'N' END AS NEW_ADVSR_ACTV_IND
,advsr.govt_id
,business_partner_id
FROM PROD_USIG_STND_VW.PDCR_DEMOGRAPHICS_VW DEMO
LEFT OUTER JOIN PROD_USIG_CMN_VW.AGY_CLOSE_MERGE_DATA_VW ACMD
ON DEMO.HOME_AGY_ID=ACMD.AGY_ID
LEFT OUTER JOIN (
SELECT NFF_AGT_CDE, MERGED_AGY_ID, NFF_FT_STRT_DT, NFF_ACTV_CDE, SQ_ORD FROM (
SELECT Row_Number() Over (Partition by NFF_AGT_CDE, MERGED_AGY_ID Order by NFF_FR_DT desc, NFF_TO_DT desc, SQ_ORD) as RW, SQ_ORD,
NFF_AGT_CDE, MERGED_AGY_ID, NFF_FT_STRT_DT, NFF_ACTV_CDE FROM
(
SELECT 
NFF_AGT_CDE, MERGED_AGY_ID, NFF_FT_STRT_DT, NFF_ACTV_CDE, NFF_FR_DT, NFF_TO_DT,
		CASE WHEN Substr(Trim(NFF_ACTV_CDE), Length(Trim(NFF_ACTV_CDE))-1) = 'IN' THEN 1
		WHEN Substr(Trim(NFF_ACTV_CDE), Length(Trim(NFF_ACTV_CDE))-1) = 'OT' THEN 2 ELSE 0 END AS SQ_ORD
	FROM PROD_STND_PRTY_VW.NFF_DATA_VW	 
) as FI	 
) as SE where SE.RW=1) NDV 
ON NDV.NFF_AGT_CDE= DEMO.BUSINESS_PARTNER_ID
AND NDV.MERGED_AGY_ID=ACMD.AFFILIATED_AGY
LEFT OUTER JOIN PROD_USIG_CRCOG_DM.ADVSR ADVSR
ON 
ADVSR.BP_ID=DEMO.BUSINESS_PARTNER_ID
)
SELECT CAST(count(*) AS varchar(100)) AS ADVSR_QTY
,CAST(count(CASE WHEN NEW_ADVSR_ACTV_IND = 'Y' THEN NEW_ADVSR_ACTV_IND END ) AS varchar(100)) AS ADVSR_ACTIVE_QTY
,CAST(count(CASE WHEN NEW_ADVSR_ACTV_IND = 'N' THEN NEW_ADVSR_ACTV_IND END ) AS varchar(100)) AS ADVSR_INACTIVE_QTY
,'NA' AS INVALID_LOS_YOS_QTY
FROM src_edw
WHERE govt_id <> '999999999'
AND govt_id NOT LIKE 'UNK%'
AND trim(govt_id) <> ''

) FACT 

CROSS JOIN 
(
SELECT 'ADVSR_QTY'  AS METRIC_NM
UNION 
SELECT 'ADVSR_ACTIVE_QTY'
UNION 
SELECT 'ADVSR_INACTIVE_QTY'
UNION 
SELECT 'INVALID_LOS_YOS_QTY'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ADVSR_QTY',ADVSR_QTY,
'ADVSR_ACTIVE_QTY',ADVSR_ACTIVE_QTY,
'ADVSR_INACTIVE_QTY',ADVSR_INACTIVE_QTY,
'INVALID_LOS_YOS_QTY',INVALID_LOS_YOS_QTY
) IS NOT NULL 

)SRC
ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) AND SRC.CYCLE_DT=TGT.CYCLE_DT and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-------------------------------------------------------------------------------------------------------*/

-- ADVSR_HIST --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 

SRC.SRC_VAL AS SRC_VAL,
Case when SRC.SRC_VAL='NA'and TGT.TGT_VAL<'3' Then '0' Else TGT.TGT_val end as  TGT_VAL,-- Threshold
TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'ADVSR_HIST' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Advisor History' as bus_nm,
'Advisor History' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'CNT_ORPHAN_ADVSR' , 'Advisor mismatch count with Advisor History'
,'OVERLAP_DATES', 'Overlap Date Counts'
,'MULTI_CURRENT', 'Multiple Current Record Counts'
,'INVALID_LOS_YOS_QTY', 'Invalid Length/Years of Service Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'CNT_ORPHAN_ADVSR' , CNT_ORPHAN_ADVSR
,'OVERLAP_DATES', OVERLAP_DATES                            
,'MULTI_CURRENT', MULTI_CURRENT   
,'INVALID_LOS_YOS_QTY', INVALID_LOS_YOS_QTY   
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

select  
 
CAST(OVERLAP_DATES as VARCHAR(20)) as  OVERLAP_DATES
,CAST(MULTI_CURRENT as VARCHAR(20)) as  MULTI_CURRENT
,CAST(INVALID_LOS_YOS_QTY as VARCHAR(20)) as  INVALID_LOS_YOS_QTY
,CAST(CNT_ORPHAN_ADVSR as VARCHAR(20)) as  CNT_ORPHAN_ADVSR

FROM 
	(SELECT count(*) AS INVALID_LOS_YOS_QTY
FROM
	(
	SELECT
		*
	FROM
		(
		SELECT
			NFF_AGT_CDE,
			NFF_FT_STRT_DT,
			NFF_FT_END_DT ,
			NFF_AGY,
			NFF_ACTV_DT,
			CASE
				WHEN LEN_OF_SVC>4 THEN '5+'
				ELSE LEN_OF_SVC
		    END AS LEN_OF_SVC_EXPECTED ,
			YR_OF_SVC AS YR_OF_SVC_EXPECTED ,
			ADV_LEN_OF_SVC ,
			ADV_YR_OF_SVC
		FROM
			(
			SELECT
				ROW_NUMBER() OVER(PARTITION BY NFF_AGT_CDE
			ORDER BY
				NFF_ACTV_DT DESC,NFF_FT_STRT_DT DESC,NFF_FT_END_DT DESC, CURR_IND DESC ) AS RW,
				NFF_AGT_CDE,
				NFF_FT_STRT_DT,
				NFF_FT_END_DT ,
				NFF_AGY,
				TRANS_DT,
				NFF_ACTV_DT,
				CASE
					WHEN NFF_FT_END_DT = '01-01-0001' 
					THEN CAST(EXTRACT(YEAR FROM NFF_ACTV_DT)-EXTRACT(YEAR FROM NFF_FT_STRT_DT) AS CHAR(10))
					ELSE CAST(EXTRACT(YEAR FROM	NFF_FT_END_DT)-EXTRACT(YEAR	FROM NFF_FT_STRT_DT) AS CHAR(10))
			    END AS LEN_OF_SVC,
				CASE
					WHEN NFF_FT_END_DT = '01-01-0001' 
					THEN (EXTRACT(YEAR FROM NFF_ACTV_DT)-EXTRACT(YEAR	FROM NFF_FT_STRT_DT))
					ELSE (EXTRACT(YEAR FROM	NFF_FT_END_DT)-EXTRACT(YEAR	FROM NFF_FT_STRT_DT))
	   		    END AS YR_OF_SVC ,
				ADV.LEN_OF_SVC AS ADV_LEN_OF_SVC ,
				ADV.YR_OF_SVC AS ADV_YR_OF_SVC ,
				NFF_ACTV_CDE
			FROM
				PROD_STND_PRTY.NFF NFF
			JOIN (SELECT LEN_OF_SVC, YR_OF_SVC  , BP_ID
			FROM 
			PROD_USIG_CRCOG_DM.ADVSR_HIST
			WHERE curr_ind = 'Y'
			and len_of_SVC not like '%AAC%'
			)
			ADV ON
				ADV.BP_ID = NFF.NFF_AGT_CDE
			WHERE
				TRIM(UPPER(NFF_ACTV_CDE)) IN ('TERMCAS','RCRTTERM') AND CURR_IND = 'Y'
				AND NFF.NFF_CNT_CDE<>'AAC')A
		WHERE
			RW = 1 ) ABC
	WHERE
		(ABC.LEN_OF_SVC_EXPECTED <> ADV_LEN_OF_SVC
		OR ABC.YR_OF_SVC_EXPECTED <> ADV_YR_OF_SVC) ) DRVD )  dm1
CROSS JOIN
(
SELECT count(*) as OVERLAP_DATES
FROM ( 
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT, PREV_END_DT, NEXT_ST_DT,  ADVSR_HIST_STRT_DT - PREV_END_DT AS DIF1,
NEXT_ST_DT - ADVSR_HIST_END_DT AS DIF2

FROM
(
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT,
MIN(ADVSR_HIST_END_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREV_END_DT,
MAX(ADVSR_HIST_STRT_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ST_DT

FROM
( 
SELECT
ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT
FROM PROD_USIG_CRCOG_DM.ADVSR_HIST
WHERE ADVSR_HIST_STRT_DT<ADVSR_HIST_END_DT
) A

) B
) C WHERE DIF1<1 OR DIF2<1

) DM2

CROSS JOIN
(
SELECT count(*) AS MULTI_CURRENT FROM (
SELECT ADVSR_SID, count(*)
FROM 
prod_usig_crcog_dm.ADVSR_HIST
WHERE CURR_IND = 'Y'
GROUP BY ADVSR_SID
HAVING count(*) > 1
) f ) DM3

CROSS JOIN 
(
SELECT count(*) AS CNT_ORPHAN_ADVSR FROM (
SELECT a.ADVSR_SID
FROM 
prod_usig_crcog_dm.ADVSR a
WHERE NOT EXISTS (SELECT 'x' FROM prod_usig_crcog_dm.ADVSR_HIST h WHERE a.ADVSR_SID = h.ADVSR_SID)
and a.ADVSR_SID<>271103147
) g ) DM4


) FACT 

CROSS JOIN 
(

SELECT 'CNT_ORPHAN_ADVSR' AS METRIC_NM
UNION 
SELECT 'OVERLAP_DATES'
UNION
SELECT 'MULTI_CURRENT'
UNION
SELECT 'INVALID_LOS_YOS_QTY'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'CNT_ORPHAN_ADVSR' , CNT_ORPHAN_ADVSR
,'OVERLAP_DATES', OVERLAP_DATES                       
,'MULTI_CURRENT', MULTI_CURRENT                       
,'INVALID_LOS_YOS_QTY', INVALID_LOS_YOS_QTY                       
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'ADVSR_HIST' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Advisor History' as bus_nm,
'Advisor History' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt,

DECODE(METRIC.METRIC_NM, 'CNT_ORPHAN_ADVSR' , 'Advisor mismatch count with Advisor History'
,'OVERLAP_DATES', 'Overlap Date Counts'
,'MULTI_CURRENT', 'Multiple Current Record Counts'
,'INVALID_LOS_YOS_QTY', 'Invalid Length/Years of Service Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'CNT_ORPHAN_ADVSR' , CNT_ORPHAN_ADVSR
,'OVERLAP_DATES', OVERLAP_DATES                            
,'MULTI_CURRENT', MULTI_CURRENT   
,'INVALID_LOS_YOS_QTY', INVALID_LOS_YOS_QTY   
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(
SELECT 'NA' AS CNT_ORPHAN_ADVSR
, 'NA' AS OVERLAP_DATES
, 'NA' AS MULTI_CURRENT
, 'NA' AS INVALID_LOS_YOS_QTY

) FACT 

CROSS JOIN 
(
SELECT 'CNT_ORPHAN_ADVSR' AS METRIC_NM
UNION 
SELECT 'OVERLAP_DATES'
UNION
SELECT 'MULTI_CURRENT'
UNION
SELECT 'INVALID_LOS_YOS_QTY'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'CNT_ORPHAN_ADVSR' , CNT_ORPHAN_ADVSR
,'OVERLAP_DATES', OVERLAP_DATES                       
,'MULTI_CURRENT', MULTI_CURRENT                       
,'INVALID_LOS_YOS_QTY', INVALID_LOS_YOS_QTY                       
) IS NOT NULL 



) SRC  ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) 
;

/*-------------------------------------------------------------------------------------------------------*/


-- SM_UNIT_ADVSR_SPLT

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS  
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt, LST_MOD_TS)

SELECT  
TGT.Schema_Nm AS Schema_Nm,TGT.Tbl_Nm AS Tbl_Nm,TGT.tbl_Typ_nm AS tbl_Typ_nm, 
TGT.Bus_Nm AS Bus_Nm, 'NA' AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, 
TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP AS LST_MOD_TS
FROM
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'SM_UNIT_ADVSR_SPLT' as Tbl_Nm,
'Dimension' as tbl_Typ_nm ,
'Sales Manager Unit Advisor Split' as Bus_Nm,
'Advisor Split Pct Counts' AS RCRD_TYP_NM,

DECODE(METRIC.METRIC_NM, 
'SPLIT_Greater_than_100','Split Percentage > 100',
'SPLIT_Less_than_100','Split Percentage < 100'
) AS METRIC_NM , 

(select max(cal_dt) from prod_usig_crcog_dm.cal) as CYCLE_DT,

CAST( 
DECODE(METRIC.METRIC_NM, 
'SPLIT_Greater_than_100',SPLIT_Greater_than_100,
'SPLIT_Less_than_100',SPLIT_Less_than_100
) 
AS VARCHAR(100) ) 
 AS TGT_VAL

FROM 

(  

SELECT  
SUM(case when SM_ADVSR_SPLT_PCT>100 THEN 1 ELSE 0 END ) AS SPLIT_Greater_than_100,
SUM (case when SM_ADVSR_SPLT_PCT<100 THEN 1 ELSE 0 END ) AS SPLIT_Less_than_100 

FROM ( 

SELECT BP_ID, 
SUM(SM_ADVSR_SPLT_PCT) as SM_ADVSR_SPLT_PCT
FROM ( 
SELECT DISTINCT BP_ID, SM_ADVSR_SPLT_PCT, SM_ADVSR_SPLT_STRT_DT, SM_ADVSR_SPLT_END_DT, UNIT_NR
FROM prod_usig_crcog_dm.SM_UNIT_ADVSR_SPLT F
JOIN prod_usig_crcog_dm.AGCY_AFFLTN A ON A.PRIOR_AGCY_NR = F.AGCY_NR 
WHERE --BP_ID = '0000000828'  AND 
A.PRIOR_AGCY_CLOS_DT >= (select max(cal_dt) from prod_usig_crcog_dm.cal) 
AND CURR_IND = 'Y'
AND (select max(cal_dt) from prod_usig_crcog_dm.cal) BETWEEN SM_ADVSR_SPLT_STRT_DT AND SM_ADVSR_SPLT_END_DT
) A
GROUP BY 1  

)DM 

) FACT 

CROSS JOIN 
(
SELECT 'SPLIT_Greater_than_100'  AS METRIC_NM
UNION 
SELECT 'SPLIT_Less_than_100'


) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'SPLIT_Greater_than_100',SPLIT_Greater_than_100,
'SPLIT_Less_than_100',SPLIT_Less_than_100
) IS NOT NULL 

) TGT;



/*-------------------------------------------------------------------------------------------------------*/


-- RCOG_DI_BONUS_FACT --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Name AS Schema_Nm,TGT.Table_Name AS Tbl_Nm,TGT.table_Type AS tbl_Typ_nm, 
TGT.Business_Name AS Bus_Nm, SRC.SOURCE_VALUE AS SRC_VAL,TGT.TARGET_VALUE AS TGT_VAL,
TGT.Rec_Type AS RCRD_TYP_NM, TGT.METRIC_NAME AS METRIC_NM, 
TGT.Cycle_date AS Cycle_dt, CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'RCOG_DI_BONUS_FACT' as Table_Name,
'Fact' as table_Type ,
'Recognition DI Bonus' as Business_Name,
'Recognition DI Bonus Amounts' AS Rec_Type,
CAST(FACT.CYCLE_DT AS DATE) AS Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'YTD_DI_PROD_CRDT_AMT', 'YTD DI PROD Credit Amount'
) AS METRIC_NAME , 

DECODE(METRIC.METRIC_NAME, 
'YTD_DI_PROD_CRDT_AMT' , YTD_DI_PROD_CRDT_AMT                            
) AS TARGET_VALUE

FROM 

(
SELECT 
MAX(CYCLE_DT) AS CYCLE_DT,
CAST( CAST( SUM(YTD_DI_PROD_CRDT_AMT) AS DECIMAL(30,2) ) AS VARCHAR(100) ) AS YTD_DI_PROD_CRDT_AMT
FROM PROD_USIG_CRCOG_DM.RCOG_DI_BONUS_FACT 
WHERE CYCLE_DT =(SELECT MAX(CYCLE_DT) FROM prod_stnd_crcog_tbls.RCOG_DI_BONUS ) 
) FACT 

CROSS JOIN 
(
SELECT 'YTD_DI_PROD_CRDT_AMT' AS METRIC_NAME
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'YTD_DI_PROD_CRDT_AMT' , YTD_DI_PROD_CRDT_AMT  
 ) IS NOT NULL 


)TGT


JOIN 
(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Name,
'RCOG_DI_BONUS_FACT' as Table_Name,
'Fact' as table_Type ,
'Recognition DI Bonus' as Business_Name,
'Recognition DI Bonus Amounts' AS Rec_Type,
CAST(EDW.CYCLE_DT AS DATE) AS Cycle_date, 

DECODE(METRIC.METRIC_NAME, 'YTD_DI_PROD_CRDT_AMT', 'YTD DI PROD Credit Amount'
) AS METRIC_NAME , 

DECODE(METRIC.METRIC_NAME, 
'YTD_DI_PROD_CRDT_AMT' , YTD_DI_PROD_CRDT_AMT                            
) AS SOURCE_VALUE

FROM 

(
SELECT
MAX(CYCLE_DT) as cycle_dt,    
CAST( CAST( sum(TOT_DI_PROD_CREDIT_AMT) AS DECIMAL(30,2) ) AS VARCHAR(100) ) AS YTD_DI_PROD_CRDT_AMT
FROM prod_stnd_crcog_tbls.RCOG_DI_BONUS rdb 
WHERE YEAR(CYCLE_DT)=YEAR(CURRENT_DATE)  
AND YEAR(BULLETIN_DT)= YEAR(CURRENT_DATE)
AND CYCLE_DT <= (SELECT MAX(CYCLE_DT) FROM prod_stnd_crcog_tbls.RCOG_DI_BONUS ) 
AND TRIM(SRC_TRANS_TYP) <> 265 
) EDW 


CROSS JOIN 
(
SELECT 'YTD_DI_PROD_CRDT_AMT' AS METRIC_NAME
) METRIC

WHERE 
DECODE(METRIC.METRIC_NAME, 
'YTD_DI_PROD_CRDT_AMT' , YTD_DI_PROD_CRDT_AMT  
) IS NOT NULL 
 

) SRC ON  TGT.Cycle_date=SRC.Cycle_date and TRIM(TGT.METRIC_NAME)=TRIM(SRC.METRIC_NAME);


/*-------------------------------------------------------------------------------------------------------*/

-- PROD (LOB_CDE) --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL,RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT 
TGT.SCHEMA_NM AS Schema_Name,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.Bus_Nm AS Bus_Nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt, CURRENT_TIMESTAMP as LST_MOD_TS

FROM (

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as SCHEMA_NM,
'PROD' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Product' as Bus_Nm,
'Product' AS RCRD_TYP_NM,

DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', 'Product Line Of Business For ANN',   
'PROD_LOB_CODE_DI', 'Product Line Of Business For DI',
'PROD_LOB_CODE_HLTH', 'Product Line Of Business For HLTH',
'PROD_LOB_CODE_INVS', 'Product Line Of Business For INVS',
'PROD_LOB_CODE_LCM', 'Product Line Of Business For LCM',
'PROD_LOB_CODE_LB', 'Product Line Of Business For LB', 
'PROD_LOB_CODE_LIFE', 'Product Line Of Business For LIFE',
'PROD_LOB_CODE_LTC', 'Product Line Of Business For LTC',
'PROD_LOB_CODE_RETIRE', 'Product Line Of Business For RETIRE',
'PROD_LOB_CODE_UNK', 'Product Line Of Business For UNK'

) AS METRIC_NM , 

(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL) AS Cycle_dt,

CAST( 
DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', PROD_LOB_CODE_ANN,   
'PROD_LOB_CODE_DI', PROD_LOB_CODE_DI,
'PROD_LOB_CODE_HLTH', PROD_LOB_CODE_HLTH,
'PROD_LOB_CODE_INVS', PROD_LOB_CODE_INVS,
'PROD_LOB_CODE_LCM', PROD_LOB_CODE_LCM,
'PROD_LOB_CODE_LB', PROD_LOB_CODE_LB, 
'PROD_LOB_CODE_LIFE', PROD_LOB_CODE_LIFE,
'PROD_LOB_CODE_LTC', PROD_LOB_CODE_LTC,
'PROD_LOB_CODE_RETIRE', PROD_LOB_CODE_RETIRE,
'PROD_LOB_CODE_UNK', PROD_LOB_CODE_UNK

) AS VARCHAR(100) ) AS TGT_VAL

FROM 
(
SELECT 
SUM ( CASE WHEN INR.LOB_CDE='ANN' THEN lob_src_count END) AS PROD_LOB_CODE_ANN,
SUM ( CASE WHEN INR.LOB_CDE='DI' THEN lob_src_count END) AS PROD_LOB_CODE_DI,
SUM ( CASE WHEN INR.LOB_CDE='HLTH' THEN lob_src_count END) AS PROD_LOB_CODE_HLTH,
SUM ( CASE WHEN INR.LOB_CDE='INVS' THEN lob_src_count END) AS PROD_LOB_CODE_INVS,
SUM ( CASE WHEN INR.LOB_CDE='LCM' THEN lob_src_count END) AS PROD_LOB_CODE_LCM,
SUM ( CASE WHEN INR.LOB_CDE='LB' THEN lob_src_count END) AS PROD_LOB_CODE_LB,
SUM ( CASE WHEN INR.LOB_CDE='LIFE' THEN lob_src_count END) AS PROD_LOB_CODE_LIFE,
SUM ( CASE WHEN INR.LOB_CDE='LTC' THEN lob_src_count END) AS PROD_LOB_CODE_LTC,
SUM ( CASE WHEN INR.LOB_CDE='RETIRE' THEN lob_src_count END) AS PROD_LOB_CODE_RETIRE,
SUM ( CASE WHEN INR.LOB_CDE='UNK' THEN lob_src_count END) AS PROD_LOB_CODE_UNK

FROM
(
select LOB_CDE, count(*) as lob_src_count from
(
SELECT * FROM PROD_USIG_CRCOG_DM.prod WHERE SRC_DEL_IND is null  and prod_id not in ('-101','-102')

) DM
group by 1

)INR
) DIMENSION 

CROSS JOIN 
(
SELECT 'PROD_LOB_CODE_ANN' AS METRIC_NM
UNION
SELECT 'PROD_LOB_CODE_DI'
UNION     
SELECT 'PROD_LOB_CODE_HLTH'
UNION
SELECT 'PROD_LOB_CODE_INVS' 
UNION     
SELECT 'PROD_LOB_CODE_LCM'
UNION  
SELECT 'PROD_LOB_CODE_LB'
UNION    
SELECT 'PROD_LOB_CODE_LIFE'
UNION     
SELECT 'PROD_LOB_CODE_LTC'
UNION    
SELECT 'PROD_LOB_CODE_RETIRE'
UNION    
SELECT 'PROD_LOB_CODE_UNK'

) METRIC

WHERE 
DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', PROD_LOB_CODE_ANN,   
'PROD_LOB_CODE_DI', PROD_LOB_CODE_DI,
'PROD_LOB_CODE_HLTH', PROD_LOB_CODE_HLTH,
'PROD_LOB_CODE_INVS', PROD_LOB_CODE_INVS,
'PROD_LOB_CODE_LCM', PROD_LOB_CODE_LCM,
'PROD_LOB_CODE_LB', PROD_LOB_CODE_LB, 
'PROD_LOB_CODE_LIFE', PROD_LOB_CODE_LIFE,
'PROD_LOB_CODE_LTC', PROD_LOB_CODE_LTC,
'PROD_LOB_CODE_RETIRE', PROD_LOB_CODE_RETIRE,
'PROD_LOB_CODE_UNK', PROD_LOB_CODE_UNK
)  IS NOT NULL 
) TGT

JOIN

(

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as SCHEMA_NM,
'PRODUCT_NONPROP UNION PRODUCT_TRANSLATOR' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Product' as Bus_Nm,
'Product' AS RCRD_TYP_NM,

DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', 'Product Line Of Business For ANN',   
'PROD_LOB_CODE_DI', 'Product Line Of Business For DI',
'PROD_LOB_CODE_HLTH', 'Product Line Of Business For HLTH',
'PROD_LOB_CODE_INVS', 'Product Line Of Business For INVS',
'PROD_LOB_CODE_LCM', 'Product Line Of Business For LCM',
'PROD_LOB_CODE_LB', 'Product Line Of Business For LB', 
'PROD_LOB_CODE_LIFE', 'Product Line Of Business For LIFE',
'PROD_LOB_CODE_LTC', 'Product Line Of Business For LTC',
'PROD_LOB_CODE_RETIRE', 'Product Line Of Business For RETIRE',
'PROD_LOB_CODE_UNK', 'Product Line Of Business For UNK'

) AS METRIC_NM , 

(SELECT MAX(CAL_DT) FROM PROD_USIG_CRCOG_DM.CAL) AS Cycle_dt,

CAST( 
DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', PROD_LOB_CODE_ANN,   
'PROD_LOB_CODE_DI', PROD_LOB_CODE_DI,
'PROD_LOB_CODE_HLTH', PROD_LOB_CODE_HLTH,
'PROD_LOB_CODE_INVS', PROD_LOB_CODE_INVS,
'PROD_LOB_CODE_LCM', PROD_LOB_CODE_LCM,
'PROD_LOB_CODE_LB', PROD_LOB_CODE_LB, 
'PROD_LOB_CODE_LIFE', PROD_LOB_CODE_LIFE,
'PROD_LOB_CODE_LTC', PROD_LOB_CODE_LTC,
'PROD_LOB_CODE_RETIRE', PROD_LOB_CODE_RETIRE,
'PROD_LOB_CODE_UNK', PROD_LOB_CODE_UNK

) AS VARCHAR(100) ) AS SRC_VAL

FROM 
(
SELECT 
SUM ( CASE WHEN INNR.LOB_CDE='ANN' THEN lob_src_count END) AS PROD_LOB_CODE_ANN,
SUM ( CASE WHEN INNR.LOB_CDE='DI' THEN lob_src_count END) AS PROD_LOB_CODE_DI,
SUM ( CASE WHEN INNR.LOB_CDE='HLTH' THEN lob_src_count END) AS PROD_LOB_CODE_HLTH,
SUM ( CASE WHEN INNR.LOB_CDE='INVS' THEN lob_src_count END) AS PROD_LOB_CODE_INVS,
SUM ( CASE WHEN INNR.LOB_CDE='LCM' THEN lob_src_count END) AS PROD_LOB_CODE_LCM,
SUM ( CASE WHEN INNR.LOB_CDE='LB' THEN lob_src_count END) AS PROD_LOB_CODE_LB,
SUM ( CASE WHEN INNR.LOB_CDE='LIFE' THEN lob_src_count END) AS PROD_LOB_CODE_LIFE,
SUM ( CASE WHEN INNR.LOB_CDE='LTC' THEN lob_src_count END) AS PROD_LOB_CODE_LTC,
SUM ( CASE WHEN INNR.LOB_CDE='RETIRE' THEN lob_src_count END) AS PROD_LOB_CODE_RETIRE,
SUM ( CASE WHEN INNR.LOB_CDE='UNK' THEN lob_src_count END) AS PROD_LOB_CODE_UNK

FROM
(
SELECT LOB_CDE, sum(lob_cde_cnt) AS lob_src_count from 
(

SELECT LOB_CDE, 
COUNT(*) as lob_cde_cnt
FROM PROD_USIG_CMN.PRODUCT_NONPROP 
GROUP BY 1

UNION 
SELECT LOB_CDE,
COUNT(*) as lob_cde_cnt 
FROM PROD_USIG_CMN.PRODUCT_TRANSLATOR GROUP BY 1 

) EDW
group by 1
)INNR
) DIMENSION 

CROSS JOIN 
(
SELECT 'PROD_LOB_CODE_ANN' AS METRIC_NM
UNION
SELECT 'PROD_LOB_CODE_DI'
UNION     
SELECT 'PROD_LOB_CODE_HLTH'
UNION
SELECT 'PROD_LOB_CODE_INVS' 
UNION     
SELECT 'PROD_LOB_CODE_LCM'
UNION  
SELECT 'PROD_LOB_CODE_LB'
UNION    
SELECT 'PROD_LOB_CODE_LIFE'
UNION     
SELECT 'PROD_LOB_CODE_LTC'
UNION    
SELECT 'PROD_LOB_CODE_RETIRE'
UNION    
SELECT 'PROD_LOB_CODE_UNK' 


) METRIC

WHERE 
DECODE(METRIC.METRIC_NM,
'PROD_LOB_CODE_ANN', PROD_LOB_CODE_ANN,   
'PROD_LOB_CODE_DI', PROD_LOB_CODE_DI,
'PROD_LOB_CODE_HLTH', PROD_LOB_CODE_HLTH,
'PROD_LOB_CODE_INVS', PROD_LOB_CODE_INVS,
'PROD_LOB_CODE_LCM', PROD_LOB_CODE_LCM,
'PROD_LOB_CODE_LB', PROD_LOB_CODE_LB, 
'PROD_LOB_CODE_LIFE', PROD_LOB_CODE_LIFE,
'PROD_LOB_CODE_LTC', PROD_LOB_CODE_LTC,
'PROD_LOB_CODE_RETIRE', PROD_LOB_CODE_RETIRE,
'PROD_LOB_CODE_UNK', PROD_LOB_CODE_UNK

)  IS NOT NULL 
) SRC

ON TGT.Cycle_dt=SRC.Cycle_dt and TGT.METRIC_NM=SRC.METRIC_NM ;


/*-------------------------------------------------------------------------------------------------------*/

--PROD (SLS_RPTG_LOB_CDE) --

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,RCRD_TYP_NM,METRIC_NM, SRC_VAL,TGT_VAL,Cycle_dt,LST_MOD_TS)

SELECT 
Schema_Nm,TBL_NM, tbl_Typ_nm, Bus_Nm, RCRD_TYP_NM, METRIC_NM, SRC_VAL, TGT_VAL, 
Cycle_dt, CURRENT_TIMESTAMP as LST_MOD_TS

FROM (

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as SCHEMA_NM,
'PROD' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'Product' as Bus_Nm,
'Product SLS Rptg LOB Cde Validations' AS RCRD_TYP_NM,
'Valid Sls Rptg Lob Cde Counts' as Metric_nm, 
'NA' as SRC_VAL, 
VALID_sls_rptg_lob_cde_cnt AS TGT_VAL, 
CYCLE_DT
from 
( 
select 
( SELECT MAX(cal_dt) as CYCLE_DT FROM prod_usig_crcog_dm.CAL ) AS CYCLE_DT, 
SUM(CASE WHEN TRIM(sls_rptg_lob_cde) = 'UNKWN'  THEN 1 ELSE 0 END) AS VALID_sls_rptg_lob_cde_cnt
FROM PROD_USIG_CRCOG_DM.prod where  prod_sid not in  ('-1','-2','-3')
group by 1
) FACT 

) DM ; 

/*-------------------------------------------------------------------------------------------------------*/


-- SM_RCOG_SUM_DLY_FACT

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as SCHEMA_NM,
'SM_RCOG_SUM_DLY_FACT' as TBL_NM,
'Fact' as TBL_TYP_NM ,
'Recognition' as BUS_NM,
 SRC.SRC_VAL,
 Tgt.TGT_VAL ,
 'SM Recognition' AS RCRD_TYP_NM, 
TGT.METRIC_NAME as METRIC_NM,
TGT.Cycle_dT AS Cycle_dt, 
CURRENT_TIMESTAMP as LST_MOD_TS 
FROM 
(
SELECT
CYCLE_DT,
LADL_FYC_AMT,
LADL_FYC_PTS,
LADL_1_4_FYC_AMT,
LADL_1_4_FYC_PTS,
PREV_YE_LADL_FYC_AMT,  
GROWTH_LADL_FYC_AMT, 
GROWTH_LADL_FYC_PTS,
LDRS_CNT,
BCC_CNT,
TOC_CNT,
LDRS_QUAL_PTS,
BCC_QUAL_PTS ,
TOC_QUAL_PTS ,
LDRS_PREV_YE_CNT,
BCC_PREV_YE_CNT,
TOC_PREV_YE_CNT,
LDRS_GRWTH_PTS,
BCC_GRWTH_PTS,
TOC_GRWTH_PTS,
LDRS_PTS,
BCC_PTS,  
TOC_PTS,
CONF_TOT_PTS,
RSNG_LDR_YTD_CNT,
RSNG_LDR_YTD_PTS,
RCRT_YTD_CNT,
RCRT_YTD_PTS,
SM_BONUS_PTS,
TOT_PTS,
DECODE(METRIC.METRIC_NAME, 
'LADL_FYC_AMT', 'LADL FYC Amount',
'LADL_FYC_PTS', 'LADL FYC Points',
'LADL_1_4_FYC_AMT', 'LADL 1 4 FYC Amount',
'LADL_1_4_FYC_PTS', 'LADL 1 4 FYC Points',
'PREV_YE_LADL_FYC_AMT', 'Previous Year LADL FYC Amount',
'GROWTH_LADL_FYC_AMT', 'Growth LADL FYC Amount',
'GROWTH_LADL_FYC_PTS', 'Growth LADL FYC Points',
'LDRS_CNT', 'LDRS Count',
'BCC_CNT', 'BCC Count',
'TOC_CNT', 'TOC Count',
'LDRS_QUAL_PTS', 'LDRS QUAL Points',
'BCC_QUAL_PTS', 'BCC QUAL Points',
'TOC_QUAL_PTS', 'TOC QUAL Points',
'LDRS_PREV_YE_CNT', 'LDRS Previous Year Count',
'BCC_PREV_YE_CNT', 'BCC Previous Year Count',
'TOC_PREV_YE_CNT', 'TOC Previous Year Count',
'LDRS_GRWTH_PTS', 'LDRS Growth Points',
'BCC_GRWTH_PTS', 'BCC Growth Points',
'TOC_GRWTH_PTS', 'TOC Growth Points',
'LDRS_PTS', 'LDRS Points',
'BCC_PTS', 'BCC Points',
'TOC_PTS', 'TOC Points',
'CONF_TOT_PTS', 'CONF Total Points',
'RSNG_LDR_YTD_CNT', 'RSNG LDR YTD Count',
'RSNG_LDR_YTD_PTS', 'RSNG LDR YTD Points',
'RCRT_YTD_CNT', 'RCRT YTD Count',
'RCRT_YTD_PTS', 'RCRT YTD Points',
'SM_BONUS_PTS', 'SM Bonus Points',
'TOT_PTS', 'TOT Points'
) AS METRIC_NAME,
CAST(  
DECODE(METRIC.METRIC_NAME,
'LADL_FYC_AMT', LADL_FYC_AMT,
'LADL_FYC_PTS', LADL_FYC_PTS,
'LADL_1_4_FYC_AMT', LADL_1_4_FYC_AMT,
'LADL_1_4_FYC_PTS', LADL_1_4_FYC_PTS,
'PREV_YE_LADL_FYC_AMT', PREV_YE_LADL_FYC_AMT,
'GROWTH_LADL_FYC_AMT', GROWTH_LADL_FYC_AMT,
'GROWTH_LADL_FYC_PTS', GROWTH_LADL_FYC_PTS,
'LDRS_CNT', LDRS_CNT,
'BCC_CNT', BCC_CNT,
'TOC_CNT', TOC_CNT,
'LDRS_QUAL_PTS', LDRS_QUAL_PTS,
'BCC_QUAL_PTS' , BCC_QUAL_PTS,
'TOC_QUAL_PTS' , TOC_QUAL_PTS,
'LDRS_PREV_YE_CNT', LDRS_PREV_YE_CNT,
'BCC_PREV_YE_CNT', BCC_PREV_YE_CNT,
'TOC_PREV_YE_CNT', TOC_PREV_YE_CNT,
'LDRS_GRWTH_PTS', LDRS_GRWTH_PTS,
'BCC_GRWTH_PTS', BCC_GRWTH_PTS,
'TOC_GRWTH_PTS', TOC_GRWTH_PTS,
'LDRS_PTS', LDRS_PTS,
'BCC_PTS',  BCC_PTS,
'TOC_PTS', TOC_PTS,
'CONF_TOT_PTS', CONF_TOT_PTS,
'RSNG_LDR_YTD_CNT', RSNG_LDR_YTD_CNT,
'RSNG_LDR_YTD_PTS', RSNG_LDR_YTD_PTS,
'RCRT_YTD_CNT', RCRT_YTD_CNT,
'RCRT_YTD_PTS', RCRT_YTD_PTS,
'SM_BONUS_PTS', SM_BONUS_PTS,
'TOT_PTS', TOT_PTS) AS VARCHAR(100) ) AS TGT_VAL
FROM
(
SELECT
CYCLE_DT,
SUM(LADL_FYC_AMT) AS LADL_FYC_AMT,
SUM(LADL_FYC_PTS) AS LADL_FYC_PTS,
SUM(LADL_1_4_FYC_AMT) AS LADL_1_4_FYC_AMT,
SUM(LADL_1_4_FYC_PTS) AS LADL_1_4_FYC_PTS,
SUM(PREV_YE_LADL_FYC_AMT) AS PREV_YE_LADL_FYC_AMT,  
SUM(GROWTH_LADL_FYC_AMT) AS GROWTH_LADL_FYC_AMT, 
SUM(GROWTH_LADL_FYC_PTS) AS GROWTH_LADL_FYC_PTS,
SUM(LDRS_CNT) AS LDRS_CNT,
SUM(BCC_CNT) AS BCC_CNT,
SUM(TOC_CNT) AS TOC_CNT,
SUM(LDRS_QUAL_PTS) AS LDRS_QUAL_PTS,
SUM(BCC_QUAL_PTS) AS BCC_QUAL_PTS ,
SUM(TOC_QUAL_PTS) AS TOC_QUAL_PTS ,
SUM(LDRS_PREV_YE_CNT) AS LDRS_PREV_YE_CNT,
SUM(BCC_PREV_YE_CNT) AS BCC_PREV_YE_CNT,
SUM(TOC_PREV_YE_CNT) AS TOC_PREV_YE_CNT,
SUM(LDRS_GRWTH_PTS) AS LDRS_GRWTH_PTS,
SUM(BCC_GRWTH_PTS) AS BCC_GRWTH_PTS,
SUM(TOC_GRWTH_PTS) AS TOC_GRWTH_PTS,
SUM(LDRS_PTS) AS LDRS_PTS,
SUM(BCC_PTS) AS BCC_PTS,  
SUM(TOC_PTS) AS TOC_PTS,
SUM(CONF_TOT_PTS) AS CONF_TOT_PTS,
SUM(RSNG_LDR_YTD_CNT) AS RSNG_LDR_YTD_CNT,
SUM(RSNG_LDR_YTD_PTS) AS RSNG_LDR_YTD_PTS,
SUM(RCRT_YTD_CNT) AS RCRT_YTD_CNT,
SUM(RCRT_YTD_PTS) AS RCRT_YTD_PTS,
SUM(SM_BONUS_PTS) AS SM_BONUS_PTS,
SUM(TOT_PTS) AS TOT_PTS
FROM
PROD_USIG_CRCOG_DM.SM_RCOG_SUM_DLY_FACT SSDF 
WHERE CYCLE_DT=(select max(cal_dt) from prod_usig_crcog_dm.cal where cal_dt < current_date and DY_OF_WK_NM not in ('Saturday','Sunday')) /*'2020-04-30'*/
GROUP BY CYCLE_DT)A 
CROSS JOIN
(
SELECT 'LADL_FYC_AMT' AS METRIC_NAME
UNION
SELECT 'LADL_FYC_PTS'
UNION 
SELECT 'LADL_1_4_FYC_AMT'
UNION
SELECT 'LADL_1_4_FYC_PTS'
UNION
SELECT 'PREV_YE_LADL_FYC_AMT'
UNION
SELECT 'GROWTH_LADL_FYC_AMT'
UNION
SELECT 'GROWTH_LADL_FYC_PTS'
UNION 
SELECT 'LDRS_CNT'
UNION
SELECT 'BCC_CNT'
UNION
SELECT 'TOC_CNT'
UNION
SELECT 'LDRS_QUAL_PTS'
UNION
SELECT 'BCC_QUAL_PTS'
UNION 
SELECT 'TOC_QUAL_PTS'
UNION
SELECT 'LDRS_PREV_YE_CNT'
UNION
SELECT 'BCC_PREV_YE_CNT'
UNION
SELECT 'TOC_PREV_YE_CNT'
UNION
SELECT 'LDRS_GRWTH_PTS'
UNION 
SELECT 'BCC_GRWTH_PTS'
UNION
SELECT 'TOC_GRWTH_PTS'
UNION
SELECT 'LDRS_PTS'
UNION
SELECT 'BCC_PTS'
UNION
SELECT 'TOC_PTS'
UNION 
SELECT 'CONF_TOT_PTS'
UNION
SELECT 'RSNG_LDR_YTD_CNT'
UNION
SELECT 'RSNG_LDR_YTD_PTS'
UNION 
SELECT 'RCRT_YTD_CNT'
UNION
SELECT 'RCRT_YTD_PTS'
UNION
SELECT 'SM_BONUS_PTS'
UNION
SELECT 'TOT_PTS')METRIC
WHERE 
DECODE(METRIC.METRIC_NAME, 
'LADL_FYC_AMT', 'LADL FYC Amount',
'LADL_FYC_PTS', 'LADL FYC Points',
'LADL_1_4_FYC_AMT', 'LADL 1 4 FYC Amount',
'LADL_1_4_FYC_PTS', 'LADL 1 4 FYC Points',
'PREV_YE_LADL_FYC_AMT', 'Previous Year LADL FYC Amount',
'GROWTH_LADL_FYC_AMT', 'Growth LADL FYC Amount',
'GROWTH_LADL_FYC_PTS', 'Growth LADL FYC Points',
'LDRS_CNT', 'LDRS Count',
'BCC_CNT', 'BCC Count',
'TOC_CNT', 'TOC Count',
'LDRS_QUAL_PTS', 'LDRS QUAL Points',
'BCC_QUAL_PTS', 'BCC QUAL Points',
'TOC_QUAL_PTS', 'TOC QUAL Points',
'LDRS_PREV_YE_CNT', 'LDRS Previous Year Count',
'BCC_PREV_YE_CNT', 'BCC Previous Year Count',
'TOC_PREV_YE_CNT', 'TOC Previous Year Count',
'LDRS_GRWTH_PTS', 'LDRS Growth Points',
'BCC_GRWTH_PTS', 'BCC Growth Points',
'TOC_GRWTH_PTS', 'TOC Growth Points',
'LDRS_PTS', 'LDRS Points',
'BCC_PTS', 'BCC Points',
'TOC_PTS', 'TOC Points',
'CONF_TOT_PTS', 'CONF Total Points',
'RSNG_LDR_YTD_CNT', 'RSNG LDR YTD Count',
'RSNG_LDR_YTD_PTS', 'RSNG LDR YTD Points',
'RCRT_YTD_CNT', 'RCRT YTD Count',
'RCRT_YTD_PTS', 'RCRT YTD Points',
'SM_BONUS_PTS', 'SM Bonus Points',
'TOT_PTS', 'TOT Points')  IS NOT NULL )TGT
JOIN
(SELECT
CYCLE_DT,
LADL_FYC_AMT,
LADL_FYC_PTS,
LADL_1_4_FYC_AMT,
LADL_1_4_FYC_PTS,
PREV_YE_LADL_FYC_AMT,  
GROWTH_LADL_FYC_AMT, 
GROWTH_LADL_FYC_PTS,
LDRS_CNT,
BCC_CNT,
TOC_CNT,
LDRS_QUAL_PTS,
BCC_QUAL_PTS ,
TOC_QUAL_PTS ,
LDRS_PREV_YE_CNT,
BCC_PREV_YE_CNT,
TOC_PREV_YE_CNT,
LDRS_GRWTH_PTS,
BCC_GRWTH_PTS,
TOC_GRWTH_PTS,
LDRS_PTS,
BCC_PTS,  
TOC_PTS,
CONF_TOT_PTS,
RSNG_LDR_YTD_CNT,
RSNG_LDR_YTD_PTS,
RCRT_YTD_CNT,
RCRT_YTD_PTS,
SM_BONUS_PTS,
TOT_PTS,
DECODE(METRIC.METRIC_NAME, 
'LADL_FYC_AMT', 'LADL FYC Amount',
'LADL_FYC_PTS', 'LADL FYC Points',
'LADL_1_4_FYC_AMT', 'LADL 1 4 FYC Amount',
'LADL_1_4_FYC_PTS', 'LADL 1 4 FYC Points',
'PREV_YE_LADL_FYC_AMT', 'Previous Year LADL FYC Amount',
'GROWTH_LADL_FYC_AMT', 'Growth LADL FYC Amount',
'GROWTH_LADL_FYC_PTS', 'Growth LADL FYC Points',
'LDRS_CNT', 'LDRS Count',
'BCC_CNT', 'BCC Count',
'TOC_CNT', 'TOC Count',
'LDRS_QUAL_PTS', 'LDRS QUAL Points',
'BCC_QUAL_PTS', 'BCC QUAL Points',
'TOC_QUAL_PTS', 'TOC QUAL Points',
'LDRS_PREV_YE_CNT', 'LDRS Previous Year Count',
'BCC_PREV_YE_CNT', 'BCC Previous Year Count',
'TOC_PREV_YE_CNT', 'TOC Previous Year Count',
'LDRS_GRWTH_PTS', 'LDRS Growth Points',
'BCC_GRWTH_PTS', 'BCC Growth Points',
'TOC_GRWTH_PTS', 'TOC Growth Points',
'LDRS_PTS', 'LDRS Points',
'BCC_PTS', 'BCC Points',
'TOC_PTS', 'TOC Points',
'CONF_TOT_PTS', 'CONF Total Points',
'RSNG_LDR_YTD_CNT', 'RSNG LDR YTD Count',
'RSNG_LDR_YTD_PTS', 'RSNG LDR YTD Points',
'RCRT_YTD_CNT', 'RCRT YTD Count',
'RCRT_YTD_PTS', 'RCRT YTD Points',
'SM_BONUS_PTS', 'SM Bonus Points',
'TOT_PTS', 'TOT Points'
) AS METRIC_NAME,
CAST(
cast(
DECODE(METRIC.METRIC_NAME,
'LADL_FYC_AMT', LADL_FYC_AMT,
'LADL_FYC_PTS', LADL_FYC_PTS,
'LADL_1_4_FYC_AMT', LADL_1_4_FYC_AMT,
'LADL_1_4_FYC_PTS', LADL_1_4_FYC_PTS,
'PREV_YE_LADL_FYC_AMT', PREV_YE_LADL_FYC_AMT,
'GROWTH_LADL_FYC_AMT', GROWTH_LADL_FYC_AMT,
'GROWTH_LADL_FYC_PTS', GROWTH_LADL_FYC_PTS,
'LDRS_CNT', LDRS_CNT,
'BCC_CNT', BCC_CNT,
'TOC_CNT', TOC_CNT,
'LDRS_QUAL_PTS', LDRS_QUAL_PTS,
'BCC_QUAL_PTS' , BCC_QUAL_PTS,
'TOC_QUAL_PTS' , TOC_QUAL_PTS,
'LDRS_PREV_YE_CNT', LDRS_PREV_YE_CNT,
'BCC_PREV_YE_CNT', BCC_PREV_YE_CNT,
'TOC_PREV_YE_CNT', TOC_PREV_YE_CNT,
'LDRS_GRWTH_PTS', LDRS_GRWTH_PTS,
'BCC_GRWTH_PTS', BCC_GRWTH_PTS,
'TOC_GRWTH_PTS', TOC_GRWTH_PTS,
'LDRS_PTS', LDRS_PTS,
'BCC_PTS',  BCC_PTS,
'TOC_PTS', TOC_PTS,
'CONF_TOT_PTS', CONF_TOT_PTS,
'RSNG_LDR_YTD_CNT', RSNG_LDR_YTD_CNT,
'RSNG_LDR_YTD_PTS', RSNG_LDR_YTD_PTS,
'RCRT_YTD_CNT', RCRT_YTD_CNT,
'RCRT_YTD_PTS', RCRT_YTD_PTS,
'SM_BONUS_PTS', SM_BONUS_PTS,
'TOT_PTS', TOT_PTS)
as decimal(19,2))
AS VARCHAR(100) )AS SRC_VAL
FROM 
(
select 
cycle_dt,
sum(LADL_FYC_AMT) as LADL_FYC_AMT,
sum(LADL_FYC_PTs) as LADL_FYC_PTS,
sum(LADL_1_4_FYC_AMT) as LADL_1_4_FYC_AMT,
sum(LADL_1_4_FYC_PTS) as LADL_1_4_FYC_PTS,
sum(PREV_YE_LADL_FYC_AMT) as PREV_YE_LADL_FYC_AMT,
sum(GROWTH_LADL_FYC_AMT) as GROWTH_LADL_FYC_AMT,
sum(GROWTH_LADL_FYC_PTS) as GROWTH_LADL_FYC_PTS,
sum(LDRS_CNT) as LDRS_CNT,
sum(BCC_CNT) as BCC_CNT,
sum(TOC_CNT) as TOC_CNT,
sum(LDRS_PTS) as LDRS_PTS,
sum(BCC_PTS) as BCC_PTS,
sum(TOC_PTS) as TOC_PTS,
sum(LDRS_QUAL_PTS) as LDRS_QUAL_PTS,
sum(BCC_QUAL_PTS) as BCC_QUAL_PTS,
sum(TOC_QUAL_PTS) as TOC_QUAL_PTS,
sum(LDRS_GRWTH_PTS) as LDRS_GRWTH_PTS,
sum(BCC_GRWTH_PTS) as BCC_GRWTH_PTS,
sum(TOC_GRWTH_PTS) as TOC_GRWTH_PTS,
sum(LDRS_PREV_YE_CNT) as LDRS_PREV_YE_CNT,
sum(BCC_PREV_YE_CNT) as BCC_PREV_YE_CNT,
sum(TOC_PREV_YE_CNT) as TOC_PREV_YE_CNT,
sum(CONF_TOT_PTS) as CONF_TOT_PTS,
sum(RSNG_LDR_YTD_CNT) as RSNG_LDR_YTD_CNT,
sum(RSNG_LDR_YTD_PTS) as RSNG_LDR_YTD_PTS,
sum(RCRT_YTD_CNT) as RCRT_YTD_CNT,
sum(RCRT_YTD_PTS) as RCRT_YTD_PTS,
sum(SM_BONUS_PTS) as SM_BONUS_PTS,
sum(TOT_PTS) as TOT_PTS
FROM 
(
select 
final.*,
0 as SM_BONUS_PTS,
CAST(CAST(COALESCE(LADL_FYC_PTS,0) AS DECIMAL(19,2)) + COALESCE(LADL_1_4_FYC_PTS,0) + COALESCE(RSNG_LDR_YTD_PTS,0) + COALESCE(CONF_TOT_PTS,0) + COALESCE(RCRT_YTD_PTS,0) AS DECIMAL(19,2)) AS TOT_PTS

FROM (
select distinct
base.CYCLE_DT,
base.UNIT_NR,
base.LADL_FYC_AMT,
coalesce(RCOG_PTS_LADL.RCOG_POINT_CD_VAL,0) as LADL_FYC_PTS,
base.LADL_1_4_FYC_AMT,
coalesce(RCOG_PTS_LADL14.RCOG_POINT_CD_VAL,0) as LADL_1_4_FYC_PTS,
PREV_YE_LADL_FYC_AMT,
GROWTH_LADL_FYC_AMT,
coalesce(RCOG_PTS_LADL_GTH.RCOG_POINT_CD_VAL,0) as GROWTH_LADL_FYC_PTS ,
LDRS_CNT,
BCC_CNT,
TOC_CNT,

CASE WHEN LDRS_QUAL_PTS > LDRS_GRWTH_PTS THEN LDRS_QUAL_PTS ELSE LDRS_GRWTH_PTS END AS LDRS_PTS,
CASE WHEN BCC_QUAL_PTS > BCC_GRWTH_PTS THEN BCC_QUAL_PTS ELSE BCC_GRWTH_PTS END AS BCC_PTS,
CASE WHEN TOC_QUAL_PTS > TOC_GRWTH_PTS THEN TOC_QUAL_PTS ELSE TOC_GRWTH_PTS END AS TOC_PTS,

LDRS_QUAL_PTS,
BCC_QUAL_PTS,
TOC_QUAL_PTS,

LDRS_GRWTH_PTS,
BCC_GRWTH_PTS,
TOC_GRWTH_PTS,

LDRS_PREV_YE_CNT,
BCC_PREV_YE_CNT,
TOC_PREV_YE_CNT,

case when (
CASE WHEN LDRS_QUAL_PTS > LDRS_GRWTH_PTS THEN LDRS_QUAL_PTS ELSE LDRS_GRWTH_PTS END +
CASE WHEN BCC_QUAL_PTS > BCC_GRWTH_PTS THEN BCC_QUAL_PTS ELSE BCC_GRWTH_PTS END +
CASE WHEN TOC_QUAL_PTS > TOC_GRWTH_PTS THEN TOC_QUAL_PTS ELSE TOC_GRWTH_PTS END) > 10 then 10 else
(CASE WHEN LDRS_QUAL_PTS > LDRS_GRWTH_PTS THEN LDRS_QUAL_PTS ELSE LDRS_GRWTH_PTS END +
CASE WHEN BCC_QUAL_PTS > BCC_GRWTH_PTS THEN BCC_QUAL_PTS ELSE BCC_GRWTH_PTS END +
CASE WHEN TOC_QUAL_PTS > TOC_GRWTH_PTS THEN TOC_QUAL_PTS ELSE TOC_GRWTH_PTS END)
end AS CONF_TOT_PTS,

RSNG_LDR_YTD_CNT,
coalesce(RCOG_PTS_LADL_RL.RCOG_POINT_CD_VAL,0) as RSNG_LDR_YTD_PTS,
H.RCOG_RCRT_CNT as RCRT_YTD_CNT,
H.RCOG_RCRT_CNT *1 as RCRT_YTD_PTS

/*-------------------------base data start -------------------------------------*/
from 
(
select distinct 
AGCY_NR,
comm_data_curr.CYCLE_DT,
comm_data_curr.unit_nr as UNIT_NR,
LADL_FYC_AMT,
comm_data_curr.LADL_1_4_FYC_AMT,
coalesce(PREV_YE_LADL_FYC_AMT,0) as PREV_YE_LADL_FYC_AMT ,
LADL_FYC_AMT - coalesce(PREV_YE_LADL_FYC_AMT,0) as GROWTH_LADL_FYC_AMT,
LDRS_CNT,
BCC_CNT,
TOC_CNT,
LDRS_CNT * 1 as LDRS_QUAL_PTS,
BCC_CNT * 1.5 as BCC_QUAL_PTS,
TOC_CNT * 2 as TOC_QUAL_PTS,
RSNG_LDR_YTD_CNT,
LDRS_PREV_YE_CNT,
BCC_PREV_YE_CNT,
TOC_PREV_YE_CNT,
(LDRS_CNT - COALESCE(LDRS_PREV_YE_CNT,0)) * 2 AS LDRS_GRWTH_PTS,
(BCC_CNT - COALESCE(BCC_PREV_YE_CNT,0)) * 3 AS BCC_GRWTH_PTS,
(TOC_CNT - COALESCE(TOC_PREV_YE_CNT,0)) * 4 AS TOC_GRWTH_PTS,
RCOG_SM_GRP_NR
from 
(

SELECT DISTINCT 
AGCY_NR,
CYCLE_DT,
fact.UNIT_NR,
SUM(CASE WHEN OVERALL_FYC<CAPPED_FYC THEN OVERALL_FYC ELSE CAPPED_FYC END) OVER (PARTITION  BY fact.UNIT_NR) AS LADL_FYC_AMT,
SUM(CASE WHEN LADL_ADVSR_1_4_AMT<LADL_CAPPED_ADVSR_1_4_FYC_AMT THEN LADL_ADVSR_1_4_AMT ELSE LADL_CAPPED_ADVSR_1_4_FYC_AMT END) OVER (PARTITION  BY fact.UNIT_NR) AS LADL_1_4_FYC_AMT,
SUM(RCOG_LDRS_CNT) OVER (PARTITION  BY fact.UNIT_NR) AS LDRS_CNT,
SUM(RCOG_BCC_CNT) OVER (PARTITION  BY fact.UNIT_NR) AS BCC_CNT,
SUM(RCOG_TOC_CNT) OVER (PARTITION  BY fact.UNIT_NR) AS TOC_CNT,
SUM(RSNG_LDR_CNT) OVER (PARTITION  BY fact.UNIT_NR) AS RSNG_LDR_YTD_CNT,
case when sm_grp.unit_nr is null then '2' else sm_grp.RCOG_SM_GRP_NR end as RCOG_SM_GRP_NR
FROM PROD_USIG_CRCOG_DM.SM_RCOG_ADVSR_DLY_FACT fact
Left outer JOIN PROD_USIG_CRCOG_DM.RCOG_SM_GROUP SM_GRP 
ON ( TRIM(LEADING '0' FROM fact.UNIT_NR ) = TRIM(LEADING '0' FROM SM_GRP.UNIT_NR )
     AND fact.CYCLE_DT BETWEEN CAST(SM_GRP.RCOG_SM_GRP_STRT_DT AS DATE) AND CAST(SM_GRP.RCOG_SM_GRP_END_DT AS DATE) )
WHERE CYCLE_DT =(select max(cal_dt) from prod_usig_crcog_dm.cal where cal_dt < current_date and DY_OF_WK_NM not in ('Saturday','Sunday')) /*'2020-04-30'*/ --and unit_nr = '001007'
--order by 3
) comm_data_curr 

/*----------------------------------------Previous year commission data----------------------------------*/
left outer join 
(
SELECT DISTINCT 
--CYCLE_DT,
UNIT_NR,
SUM(CASE WHEN OVERALL_FYC<CAPPED_FYC THEN OVERALL_FYC ELSE CAPPED_FYC END) OVER (PARTITION  BY UNIT_NR) AS PREV_YE_LADL_FYC_AMT,
SUM(RCOG_LDRS_CNT) OVER (PARTITION  BY UNIT_NR) AS LDRS_PREV_YE_CNT,
SUM(RCOG_BCC_CNT) OVER (PARTITION  BY UNIT_NR) AS BCC_PREV_YE_CNT,
SUM(RCOG_TOC_CNT) OVER (PARTITION  BY UNIT_NR) AS TOC_PREV_YE_CNT

FROM PROD_USIG_CRCOG_DM.SM_RCOG_ADVSR_DLY_FACT fact
WHERE CYCLE_DT = (select max(cal_dt) from prod_usig_crcog_dm.cal where cal_yr= extract(year from current_date)-1 and  DY_OF_WK_NM not in ('Saturday','Sunday')) /*'2019-12-31'*/ -- and unit_nr = '001007'
) comm_data_prev
on comm_data_curr.unit_nr = comm_data_prev.unit_nr
)base

/*-------------------------base data end -----------------------------------------------------------------------------------------*/

--------Join to RCOG_POINTS to get PTS columns for LADL_FYC_AMT -----
LEFT OUTER JOIN 
(
SELECT DISTINCT 
RCOG_SM_GRP_STRT_DT,RCOG_SM_GRP_END_DT,UNIT_NR,RCOG_AGCY_GRP_NR,RCOG_POINT_CD_MIN_VAL,RCOG_POINT_CD_MAX_VAL,RCOG_POINT_CD_VAL,
RCOG_POINT_CD_STRT_DT, RCOG_POINT_CD_END_DT,RCOG_SM_GRP_NR,RCOG_POINT_CD_NM,RCOG_RPTNG_GRP_CD
FROM  PROD_USIG_CRCOG_DM.RCOG_POINTS A
JOIN PROD_USIG_CRCOG_DM.RCOG_SM_GROUP B ON A.RCOG_AGCY_GRP_NR=B.RCOG_SM_GRP_NR
WHERE TRIM(UPPER(RCOG_POINT_CD_NM))='T1LADLPOINTS' AND TRIM(UPPER(RCOG_RPTNG_GRP_CD))='SMR'

) RCOG_PTS_LADL
ON (
 base.CYCLE_DT BETWEEN RCOG_PTS_LADL.RCOG_POINT_CD_STRT_DT AND RCOG_PTS_LADL.RCOG_POINT_CD_END_DT 
and base.RCOG_SM_GRP_NR = RCOG_PTS_LADL.RCOG_AGCY_GRP_NR
AND base.LADL_FYC_AMT BETWEEN RCOG_PTS_LADL.RCOG_POINT_CD_MIN_VAL AND RCOG_PTS_LADL.RCOG_POINT_CD_MAX_VAL)

--------Join to RCOG_POINTS to get PTS columns for LADL_1_4_FYC_AMT -----

LEFT OUTER JOIN 
(
SELECT DISTINCT 
RCOG_SM_GRP_STRT_DT,RCOG_SM_GRP_END_DT,UNIT_NR,RCOG_AGCY_GRP_NR,RCOG_POINT_CD_MIN_VAL,RCOG_POINT_CD_MAX_VAL,RCOG_POINT_CD_VAL,
RCOG_POINT_CD_STRT_DT, RCOG_POINT_CD_END_DT,RCOG_SM_GRP_NR,RCOG_POINT_CD_NM,RCOG_RPTNG_GRP_CD
FROM  PROD_USIG_CRCOG_DM.RCOG_POINTS A
JOIN PROD_USIG_CRCOG_DM.RCOG_SM_GROUP B ON A.RCOG_AGCY_GRP_NR=B.RCOG_SM_GRP_NR
WHERE TRIM(UPPER(RCOG_POINT_CD_NM))='T1LADL14POINTS' AND TRIM(UPPER(RCOG_RPTNG_GRP_CD))='SMR'
) RCOG_PTS_LADL14
ON (base.CYCLE_DT BETWEEN RCOG_PTS_LADL14.RCOG_POINT_CD_STRT_DT AND RCOG_PTS_LADL14.RCOG_POINT_CD_END_DT 
and base.RCOG_SM_GRP_NR = RCOG_PTS_LADL14.RCOG_AGCY_GRP_NR
AND base.LADL_1_4_FYC_AMT BETWEEN RCOG_PTS_LADL14.RCOG_POINT_CD_MIN_VAL AND RCOG_PTS_LADL14.RCOG_POINT_CD_MAX_VAL)


/*----------------------------------------Join to RCOG_POINTS to get PTS columns for GROWTH_LADL_FYC_AMT -----------------*/
LEFT OUTER JOIN 
(
SELECT DISTINCT 
RCOG_SM_GRP_STRT_DT,RCOG_SM_GRP_END_DT,UNIT_NR,RCOG_AGCY_GRP_NR,RCOG_POINT_CD_MIN_VAL,RCOG_POINT_CD_MAX_VAL,RCOG_POINT_CD_VAL,
RCOG_POINT_CD_STRT_DT, RCOG_POINT_CD_END_DT,RCOG_SM_GRP_NR,RCOG_POINT_CD_NM,RCOG_RPTNG_GRP_CD
FROM  PROD_USIG_CRCOG_DM.RCOG_POINTS A
JOIN PROD_USIG_CRCOG_DM.RCOG_SM_GROUP B ON A.RCOG_AGCY_GRP_NR=B.RCOG_SM_GRP_NR
WHERE TRIM(UPPER(RCOG_POINT_CD_NM))='T1LADLGROWTHPOINTS' AND TRIM(UPPER(RCOG_RPTNG_GRP_CD))='SMR'
--and unit_nr ='001007'
) RCOG_PTS_LADL_GTH
ON (
 base.CYCLE_DT BETWEEN RCOG_PTS_LADL_GTH.RCOG_POINT_CD_STRT_DT AND RCOG_PTS_LADL_GTH.RCOG_POINT_CD_END_DT 
and base.RCOG_SM_GRP_NR = RCOG_PTS_LADL_GTH.RCOG_AGCY_GRP_NR
AND base.GROWTH_LADL_FYC_AMT BETWEEN RCOG_PTS_LADL_GTH.RCOG_POINT_CD_MIN_VAL AND RCOG_PTS_LADL_GTH.RCOG_POINT_CD_MAX_VAL)


----------------------------------------Join to RCOG_POINTS to get PTS columns for RSNG_LDR_YTD_CNT,
LEFT OUTER JOIN 
(
SELECT DISTINCT 
RCOG_SM_GRP_STRT_DT,RCOG_SM_GRP_END_DT,UNIT_NR,RCOG_AGCY_GRP_NR,RCOG_POINT_CD_MIN_VAL,RCOG_POINT_CD_MAX_VAL,RCOG_POINT_CD_VAL,
RCOG_POINT_CD_STRT_DT, RCOG_POINT_CD_END_DT,RCOG_SM_GRP_NR,RCOG_POINT_CD_NM,RCOG_RPTNG_GRP_CD
FROM  PROD_USIG_CRCOG_DM.RCOG_POINTS A
JOIN PROD_USIG_CRCOG_DM.RCOG_SM_GROUP B ON A.RCOG_AGCY_GRP_NR=B.RCOG_SM_GRP_NR
WHERE TRIM(UPPER(RCOG_POINT_CD_NM))='RISINGLEADERPOINTS' AND TRIM(UPPER(RCOG_RPTNG_GRP_CD))='SMR'
--and unit_nr ='001007'
) RCOG_PTS_LADL_RL
ON (base.CYCLE_DT BETWEEN RCOG_PTS_LADL_RL.RCOG_POINT_CD_STRT_DT AND RCOG_PTS_LADL_RL.RCOG_POINT_CD_END_DT 
and base.RCOG_SM_GRP_NR = RCOG_PTS_LADL_RL.RCOG_AGCY_GRP_NR
AND base.RSNG_LDR_YTD_CNT BETWEEN RCOG_PTS_LADL_RL.RCOG_POINT_CD_MIN_VAL AND RCOG_PTS_LADL_RL.RCOG_POINT_CD_MAX_VAL)

------------------------------------------------Join on NFF to get RCRT details
LEFT JOIN
(
SELECT 
UNIT_NR,
AGCY_NR,
CYCLE_DT,
case when SUM(RCOG_RCRT_CNT) > 10 then 10 else SUM(RCOG_RCRT_CNT) end  AS RCOG_RCRT_CNT
FROM PROD_USIG_CRCOG_DM.SM_RCOG_NFF_DLY_FACT A 
WHERE CYCLE_DT = (select max(cal_dt) from prod_usig_crcog_dm.cal where cal_dt < current_date and DY_OF_WK_NM not in ('Saturday','Sunday')) /*'2020-04-30' */
GROUP BY 1,2,3
) H
ON base.UNIT_NR=H.UNIT_NR 
AND base.AGCY_NR=H.AGCY_NR 
AND base.CYCLE_DT = H.CYCLE_DT

--where base.unit_nr ='001032'
) final
)src2
group by cycle_dt
)src

CROSS JOIN
(
SELECT 'LADL_FYC_AMT' AS METRIC_NAME
UNION
SELECT 'LADL_FYC_PTS'
UNION 
SELECT 'LADL_1_4_FYC_AMT'
UNION
SELECT 'LADL_1_4_FYC_PTS'
UNION
SELECT 'PREV_YE_LADL_FYC_AMT'
UNION
SELECT 'GROWTH_LADL_FYC_AMT'
UNION
SELECT 'GROWTH_LADL_FYC_PTS'
UNION 
SELECT 'LDRS_CNT'
UNION
SELECT 'BCC_CNT'
UNION
SELECT 'TOC_CNT'
UNION
SELECT 'LDRS_QUAL_PTS'
UNION
SELECT 'BCC_QUAL_PTS'
UNION 
SELECT 'TOC_QUAL_PTS'
UNION
SELECT 'LDRS_PREV_YE_CNT'
UNION
SELECT 'BCC_PREV_YE_CNT'
UNION
SELECT 'TOC_PREV_YE_CNT'
UNION
SELECT 'LDRS_GRWTH_PTS'
UNION 
SELECT 'BCC_GRWTH_PTS'
UNION
SELECT 'TOC_GRWTH_PTS'
UNION
SELECT 'LDRS_PTS'
UNION
SELECT 'BCC_PTS'
UNION
SELECT 'TOC_PTS'
UNION 
SELECT 'CONF_TOT_PTS'
UNION
SELECT 'RSNG_LDR_YTD_CNT'
UNION
SELECT 'RSNG_LDR_YTD_PTS'
UNION 
SELECT 'RCRT_YTD_CNT'
UNION
SELECT 'RCRT_YTD_PTS'
UNION
SELECT 'SM_BONUS_PTS'
UNION
SELECT 'TOT_PTS')METRIC
WHERE 
DECODE(METRIC.METRIC_NAME, 
'LADL_FYC_AMT', 'LADL FYC Amount',
'LADL_FYC_PTS', 'LADL FYC Points',
'LADL_1_4_FYC_AMT', 'LADL 1 4 FYC Amount',
'LADL_1_4_FYC_PTS', 'LADL 1 4 FYC Points',
'PREV_YE_LADL_FYC_AMT', 'Previous Year LADL FYC Amount',
'GROWTH_LADL_FYC_AMT', 'Growth LADL FYC Amount',
'GROWTH_LADL_FYC_PTS', 'Growth LADL FYC Points',
'LDRS_CNT', 'LDRS Count',
'BCC_CNT', 'BCC Count',
'TOC_CNT', 'TOC Count',
'LDRS_QUAL_PTS', 'LDRS QUAL Points',
'BCC_QUAL_PTS', 'BCC QUAL Points',
'TOC_QUAL_PTS', 'TOC QUAL Points',
'LDRS_PREV_YE_CNT', 'LDRS Previous Year Count',
'BCC_PREV_YE_CNT', 'BCC Previous Year Count',
'TOC_PREV_YE_CNT', 'TOC Previous Year Count',
'LDRS_GRWTH_PTS', 'LDRS Growth Points',
'BCC_GRWTH_PTS', 'BCC Growth Points',
'TOC_GRWTH_PTS', 'TOC Growth Points',
'LDRS_PTS', 'LDRS Points',
'BCC_PTS', 'BCC Points',
'TOC_PTS', 'TOC Points',
'CONF_TOT_PTS', 'CONF Total Points',
'RSNG_LDR_YTD_CNT', 'RSNG LDR YTD Count',
'RSNG_LDR_YTD_PTS', 'RSNG LDR YTD Points',
'RCRT_YTD_CNT', 'RCRT YTD Count',
'RCRT_YTD_PTS', 'RCRT YTD Points',
'SM_BONUS_PTS', 'SM Bonus Points',
'TOT_PTS', 'TOT Points')IS NOT NULL 
)SRC ON(SRC.CYCLE_DT = TGT.CYCLE_DT AND TGT.METRIC_NAME=SRC.METRIC_NAME) ; 


/*-------------------------------------------------------------------------------------------------------*/

-- NATL_ACCT

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (

SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NATL_ACCT' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'National Account' as bus_nm,
'National Account' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'ACTV_NATL_ACCT' , 'Active National Account Counts', 
'ACTV_LIC_AFF', 'Active License Affiliate Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ACTV_NATL_ACCT' , ACTV_NATL_ACCT, 
'ACTV_LIC_AFF', ACTV_LIC_AFF                            
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(

SELECT ACTV_NATL_ACCT, ACTV_LIC_AFF FROM (
select count(distinct NATL_ACCT_ADVSR_SID) AS ACTV_NATL_ACCT
from prod_usig_crcog_dm.NATL_ACCT  
where TRIM(UPPER(CURR_IND)) = 'Y' AND NATL_ACCT_END_DT >= ( select max(cal_dt) from prod_usig_crcog_Dm.cal )
) act
CROSS JOIN
(SELECT ACTV_LIC_AFF FROM (
select count(distinct LIC_AFF_ADVSR_SID) AS ACTV_LIC_AFF
from prod_usig_crcog_dm.NATL_ACCT  
where LIC_AFF_END_DT >= ( select max(cal_dt) from prod_usig_crcog_Dm.cal )
--AND nvl(trim(upper(lic_aff_cntr_cde)),'') NOT IN ('','Z217')
) lic_aff ) d
  
) FACT 


CROSS JOIN 
(
SELECT 'ACTV_NATL_ACCT' AS METRIC_NM
UNION 
SELECT 'ACTV_LIC_AFF'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ACTV_NATL_ACCT' , ACTV_NATL_ACCT, 
'ACTV_LIC_AFF', ACTV_LIC_AFF                       
) IS NOT NULL 


)TGT



JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NATL_ACCT' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'National Account' as bus_nm,
'National Account' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'ACTV_NATL_ACCT' , 'Active National Account Counts', 
'ACTV_LIC_AFF', 'Active License Affiliate Counts'
) AS METRIC_NM , 

CAST( 
DECODE(METRIC.METRIC_NM, 
'ACTV_NATL_ACCT' , ACTV_NATL_ACCT, 
'ACTV_LIC_AFF', ACTV_LIC_AFF                            
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(
WITH na AS 
( 
select agy.AGY_ID AS AGENCY_BPID, NATL_ACCT_ADVSR_BPID, NATL_ACCT_TYP_DESC ,NATL_ACCT_CNTR_CDE ,NATL_ACCT_STRT_DT,NATL_ACCT_END_DT, NA.AGY_BPID
from
(
SELECT
L0_PARENT_BPID AS AGY_BPID, PDCR_BPID AS NATL_ACCT_ADVSR_BPID , L0_STD_CONTR_TYP_DESC as NATL_ACCT_TYP_DESC , 
L0_STD_CONTR_TYP_CD as NATL_ACCT_CNTR_CDE ,
min(L0_BUS_STRT_DT) as NATL_ACCT_STRT_DT , max(L0_BUS_END_DT) as NATL_ACCT_END_DT
FROM PROD_STND_CRCOG_TBLS.ADVSR_CNTR  con WHERE
TRIM(UPPER(L0_STD_CONTR_TYP_CD)) IN ('Z243','Z245','Z246','Z247','Z248', 'Z235','Z407')
AND TRIM(UPPER(L0_PRNT_SLLNG_AGMT_RLE)) = 'DST'
--and PDCR_BPID in ('378518','605661' ,'370419')
group by 1,2,3,4
) NA

JOIN ( select distinct agy_id, agy_bp_id,AGY_DSTRB_CHNL from PROD_USIG_CMN.AGY_MERGE) 
agy ON trim(LEADING '0' from AGY_BP_ID) = NA.AGY_BPID
AND (TRIM(UPPER(agy.AGY_DSTRB_CHNL)) in('CAS') OR trim(LEADING '0' from agy.agy_id) in ( '113','226','244'))
)

SELECT NAT.ACTV_NATL_ACCT, ACTV_LIC_AFF FROM 
(
SELECT count(distinct NATL_ACCT_ADVSR_BPID) AS ACTV_NATL_ACCT 
FROM na
where na.NATL_ACCT_END_DT >= ( select max(cal_dt) from prod_usig_crcog_Dm.cal )
) NAT 

CROSS JOIN 
(
SELECT count(DISTINCT LIC_AFF_ADVSR_BPID ) AS ACTV_LIC_AFF FROM 
(select distinct License_aff_list.level1_NA_ID ,License_aff_list.LIC_AFF_ADVSR_BPID,License_aff_list.LIC_AFF_TYP_DESC,License_aff_list.LIC_AFF_CNTR_CDE,
License_aff_list.LIC_AFF_STRT_DT, License_aff_list.LIC_AFF_END_DT ,  License_aff_list.lic_aff_agy
from
( SELECT   distinct  L0_PARENT_BPID as level1_NA_ID,dst_bpid as lic_aff_agy, ---added on 8/31
  PDCR_BPID as LIC_AFF_ADVSR_BPID, L0_STD_CONTR_TYP_DESC as LIC_AFF_TYP_DESC,  
  L0_STD_CONTR_TYP_CD as LIC_AFF_CNTR_CDE , 
  min(L0_BUS_STRT_DT) as LIC_AFF_STRT_DT, max(L0_BUS_END_DT) as LIC_AFF_END_DT 
FROM    PROD_STND_CRCOG_TBLS.ADVSR_CNTR  
where TRIM(UPPER(L0_STD_CONTR_TYP_CD)) IN('Z234')
AND L0_PARENT_BPID <> dst_bpid
--lic.ADVSR_END_DT > NATL_ACCT_strt_DT
AND DST_REL_END_DT >= CURRENT_DATE
AND L0_PARENT_BPID IN (SELECT DISTINCT NATL_ACCT_ADVSR_BPID FROM na)
group by 1,2,3,4,5 )License_aff_list
) lic 
) b 
) FACT 

CROSS JOIN 
(

SELECT 'ACTV_NATL_ACCT' AS METRIC_NM
UNION 
SELECT 'ACTV_LIC_AFF'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'ACTV_NATL_ACCT' , ACTV_NATL_ACCT, 
'ACTV_LIC_AFF', ACTV_LIC_AFF                           
) IS NOT NULL 


) SRC ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;



/*-------------------------------------------------------------------------------------------------------*/

-- NFF_HIST

INSERT INTO prod_usig_crcog_dm.TBL_METRIC_RECONC_STATS 
(Schema_Nm,Tbl_Nm,tbl_Typ_nm,Bus_Nm,SRC_VAL,TGT_VAL, RCRD_TYP_NM,METRIC_NM,Cycle_dt,LST_MOD_TS)


SELECT TGT.Schema_Nm AS Schema_Nm,TGT.TBL_NM AS TBL_NM,TGT.tbl_Typ_nm AS tbl_Typ_nm, TGT.bus_nm AS bus_nm, 
SRC.SRC_VAL AS SRC_VAL,TGT.TGT_VAL AS TGT_VAL,TGT.RCRD_TYP_NM AS RCRD_TYP_NM, TGT.METRIC_NM AS METRIC_NM,TGT.Cycle_dt AS Cycle_dt,
CURRENT_TIMESTAMP as LST_MOD_TS
FROM  (
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NFF_HIST' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'NFF History' as bus_nm,
'NFF History' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'NFF_ACT_RCRTTERM' , 'RCRTTERM Counts'
,'NFF_ACT_RECRUIT', 'RECRUIT Counts'
,'NFF_ACT_REINCAS', 'REINCAS Counts'
,'NFF_ACT_SURVYE', 'SURVYE Counts'
,'NFF_ACT_TERMCAS', 'TERMCAS Counts'
,'NFF_ACT_TRNCAROT', 'TRNCAROT Counts'
,'NFF_ACT_TRNCASIN', 'TRNCASIN Counts'
,'NFF_ACT_TRNRCTIN', 'TRNRCTIN Counts'
,'NFF_ACT_TRNRCTOT', 'TRNRCTOT Counts'
,'OVERLAP_DATES','Overlap Date Counts'
) AS METRIC_NM , 



CAST( 
DECODE(METRIC.METRIC_NM,
'NFF_ACT_RCRTTERM', NFF_ACT_RCRTTERM,   
'NFF_ACT_RECRUIT', NFF_ACT_RECRUIT,
'NFF_ACT_REINCAS', NFF_ACT_REINCAS,
'NFF_ACT_SURVYE', NFF_ACT_SURVYE,
'NFF_ACT_TERMCAS', NFF_ACT_TERMCAS,
'NFF_ACT_TRNCAROT', NFF_ACT_TRNCAROT, 
'NFF_ACT_TRNCASIN', NFF_ACT_TRNCASIN,
'NFF_ACT_TRNRCTIN', NFF_ACT_TRNRCTIN,
'NFF_ACT_TRNRCTOT', NFF_ACT_TRNRCTOT,
'OVERLAP_DATES',OVERLAP_DATES
) AS VARCHAR(100) ) AS TGT_VAL

FROM 

(SELECT NFF_ACT_RCRTTERM
,NFF_ACT_RECRUIT
,NFF_ACT_REINCAS
,NFF_ACT_SURVYE
,NFF_ACT_TERMCAS
,NFF_ACT_TRNCAROT
,NFF_ACT_TRNCASIN
,NFF_ACT_TRNRCTIN
,NFF_ACT_TRNRCTOT
,OVERLAP_DATES
FROM 
(
SELECT 
SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='RCRTTERM' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_RCRTTERM
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='RECRUIT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_RECRUIT 
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='REINCAS' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_REINCAS 
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='SURVYE' THEN NFF_ACTIVITY_CD_CNT END) AS  NFF_ACT_SURVYE
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='TERMCAS' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TERMCAS
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='TRNCAROT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNCAROT
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='TRNCASIN' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNCASIN
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='TRNRCTIN' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNRCTIN
,SUM ( CASE WHEN trim(NFF_ACTVTY_CD)='TRNRCTOT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNRCTOT
FROM 
(
--DM data
select nff_actvty_cd, count(*) AS NFF_ACTIVITY_CD_CNT from (
select f.nff_actvty_cd, a.bp_id, nff_agy_nr, nff_ft_strt_dt, nff_to_dt, f.nff_actv_dt,
ROW_NUMBER () over(partition by  f.nff_actvty_cd, a.bp_id, nff_agy_nr, nff_ft_strt_dt
order by trans_dt desc, f.nff_actv_dt desc  ) as rnk 
from prod_USIG_CRCOG_DM.NFF_HIST F 
join prod_usig_crcog_dm.advsr a on a.advsr_sid = f.advsr_sid
) A where rnk = 1 and nff_to_dt >=  (SELECT max(cal_dt) FROM prod_usig_crcog_dm.cal)
group by 1 order by 1
) a
) DM1

CROSS JOIN
(
SELECT count(*) as OVERLAP_DATES
FROM ( 
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT, PREV_END_DT, NEXT_ST_DT,  ADVSR_HIST_STRT_DT - PREV_END_DT AS DIF1,
NEXT_ST_DT - ADVSR_HIST_END_DT AS DIF2

FROM
(
SELECT ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT,
MIN(ADVSR_HIST_END_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREV_END_DT,
MAX(ADVSR_HIST_STRT_DT) OVER (PARTITION BY ADVSR_SID ORDER BY ADVSR_HIST_STRT_DT ASC ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ST_DT

FROM
( 
SELECT
ADVSR_SID,ADVSR_HIST_SID,ADVSR_HIST_STRT_DT,ADVSR_HIST_END_DT
FROM PROD_USIG_CRCOG_DM.ADVSR_HIST
WHERE ADVSR_HIST_STRT_DT<ADVSR_HIST_END_DT
) A

) B
) C WHERE DIF1<1 OR DIF2<1

) DM2
  
) FACT 

CROSS JOIN 
(
SELECT 'NFF_ACT_RCRTTERM' AS METRIC_NM
UNION 
SELECT 'NFF_ACT_RECRUIT'
UNION 
SELECT 'NFF_ACT_REINCAS'
UNION
SELECT 'NFF_ACT_SURVYE'
UNION
SELECT 'NFF_ACT_TERMCAS'
UNION
SELECT 'NFF_ACT_TRNCAROT'
UNION
SELECT 'NFF_ACT_TRNCASIN'
UNION
SELECT 'NFF_ACT_TRNRCTIN'
UNION
SELECT 'NFF_ACT_TRNRCTOT'
UNION 
SELECT 'OVERLAP_DATES'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'NFF_ACT_RCRTTERM' , NFF_ACT_RCRTTERM, 
'NFF_ACT_RECRUIT', NFF_ACT_RECRUIT,
'NFF_ACT_REINCAS', NFF_ACT_REINCAS,
'NFF_ACT_SURVYE', NFF_ACT_SURVYE,
'NFF_ACT_TERMCAS', NFF_ACT_TERMCAS,
'NFF_ACT_TRNCAROT', NFF_ACT_TRNCAROT,
'NFF_ACT_TRNCASIN', NFF_ACT_TRNCASIN,
'NFF_ACT_TRNRCTIN', NFF_ACT_TRNRCTIN,
'NFF_ACT_TRNRCTOT', NFF_ACT_TRNRCTOT,
'OVERLAP_DATES', OVERLAP_DATES
) IS NOT NULL 


)TGT


JOIN 
(
SELECT 
'PROD_USIG_CRCOG_DM_RPTG_VW' as Schema_Nm,
'NFF_HIST' as TBL_NM,
'Dimension' as tbl_Typ_nm ,
'NFF History' as bus_nm,
'NFF History' AS RCRD_TYP_NM,
(SELECT MAX(CAL_DT) from  prod_usig_crcog_dm.CAL) as Cycle_dt, 

DECODE(METRIC.METRIC_NM, 'NFF_ACT_RCRTTERM' , 'RCRTTERM Counts'
,'NFF_ACT_RECRUIT', 'RECRUIT Counts'
,'NFF_ACT_REINCAS', 'REINCAS Counts'
,'NFF_ACT_SURVYE', 'SURVYE Counts'
,'NFF_ACT_TERMCAS', 'TERMCAS Counts'
,'NFF_ACT_TRNCAROT', 'TRNCAROT Counts'
,'NFF_ACT_TRNCASIN', 'TRNCASIN Counts'
,'NFF_ACT_TRNRCTIN', 'TRNRCTIN Counts'
,'NFF_ACT_TRNRCTOT', 'TRNRCTOT Counts'
,'OVERLAP_DATES','Overlap Date Counts'
) AS METRIC_NM , 


CAST( 
DECODE(METRIC.METRIC_NM,
'NFF_ACT_RCRTTERM', NFF_ACT_RCRTTERM,   
'NFF_ACT_RECRUIT', NFF_ACT_RECRUIT,
'NFF_ACT_REINCAS', NFF_ACT_REINCAS,
'NFF_ACT_SURVYE', NFF_ACT_SURVYE,
'NFF_ACT_TERMCAS', NFF_ACT_TERMCAS,
'NFF_ACT_TRNCAROT', NFF_ACT_TRNCAROT, 
'NFF_ACT_TRNCASIN', NFF_ACT_TRNCASIN,
'NFF_ACT_TRNRCTIN', NFF_ACT_TRNRCTIN,
'NFF_ACT_TRNRCTOT', NFF_ACT_TRNRCTOT,
'OVERLAP_DATES',OVERLAP_DATES
) AS VARCHAR(100) ) AS SRC_VAL

FROM 

(SELECT NFF_ACT_RCRTTERM
,NFF_ACT_RECRUIT
,NFF_ACT_REINCAS
,NFF_ACT_SURVYE
,NFF_ACT_TERMCAS
,NFF_ACT_TRNCAROT
,NFF_ACT_TRNCASIN
,NFF_ACT_TRNRCTIN
,NFF_ACT_TRNRCTOT
,OVERLAP_DATES
FROM 
(
SELECT 
SUM ( CASE WHEN trim(NFF_ACTV_CDE)='RCRTTERM' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_RCRTTERM
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='RECRUIT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_RECRUIT 
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='REINCAS' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_REINCAS 
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='SURVYE' THEN NFF_ACTIVITY_CD_CNT END) AS  NFF_ACT_SURVYE
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='TERMCAS' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TERMCAS
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='TRNCAROT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNCAROT
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='TRNCASIN' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNCASIN
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='TRNRCTIN' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNRCTIN
,SUM ( CASE WHEN trim(NFF_ACTV_CDE)='TRNRCTOT' THEN NFF_ACTIVITY_CD_CNT END) AS NFF_ACT_TRNRCTOT
FROM 
(
--EDW Recon script
SELECT NFF_ACTV_CDE, count(*) AS NFF_ACTIVITY_CD_CNT from  (
select nff_actv_cde, nff_agt_cde, nff_agy, nff_ft_strt_dt, nff_to_dt, nff_actv_dt,
ROW_NUMBER () over(partition by  nff_actv_cde, nff_agt_cde, nff_agy, nff_ft_strt_dt 
order by trans_dt desc, nff_actv_dt desc ) as rnk 
FROM prod_STND_PRTY.NFF
) A where rnk = 1 and nff_to_dt >= (SELECT max(cal_dt) FROM prod_usig_crcog_dm.cal)
group by nff_actv_cde order by 1
) a
) EDW1 

CROSS JOIN 
(select 0 as OVERLAP_DATES ) EDW2


) FACT 

CROSS JOIN 
(
SELECT 'NFF_ACT_RCRTTERM' AS METRIC_NM
UNION 
SELECT 'NFF_ACT_RECRUIT'
UNION 
SELECT 'NFF_ACT_REINCAS'
UNION
SELECT 'NFF_ACT_SURVYE'
UNION
SELECT 'NFF_ACT_TERMCAS'
UNION
SELECT 'NFF_ACT_TRNCAROT'
UNION
SELECT 'NFF_ACT_TRNCASIN'
UNION
SELECT 'NFF_ACT_TRNRCTIN'
UNION
SELECT 'NFF_ACT_TRNRCTOT'
UNION 
SELECT 'OVERLAP_DATES'
) METRIC

WHERE 
DECODE(METRIC.METRIC_NM, 
'NFF_ACT_RCRTTERM' , NFF_ACT_RCRTTERM, 
'NFF_ACT_RECRUIT', NFF_ACT_RECRUIT,
'NFF_ACT_REINCAS', NFF_ACT_REINCAS,
'NFF_ACT_SURVYE', NFF_ACT_SURVYE,
'NFF_ACT_TERMCAS', NFF_ACT_TERMCAS,
'NFF_ACT_TRNCAROT', NFF_ACT_TRNCAROT,
'NFF_ACT_TRNCASIN', NFF_ACT_TRNCASIN,
'NFF_ACT_TRNRCTIN', NFF_ACT_TRNRCTIN,
'NFF_ACT_TRNRCTOT', NFF_ACT_TRNRCTOT,
'OVERLAP_DATES', OVERLAP_DATES
) IS NOT NULL 


) SRC  ON TRIM(SRC.METRIC_NM)=TRIM(TGT.METRIC_NM) and TRIM(SRC.TBL_NM)=TRIM(TGT.TBL_NM) ;


/*-------------------------------------------------------------------------------------------------------*/







/*-------------------------------------------------------------------------------------------------------*/
